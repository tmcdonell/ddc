
module DDC.Core.Codec.SExp.Parser.Base
export { stateOfList;
         peek; shift; next; take; takeToksWhile }
import Data.Text
import Data.Ref

-- Using this in place of a proper exception mechanism.
import foreign c value
 exit    : [a: Data]. Nat# -> a

where


-------------------------------------------------------------------------------
-- | Parser state holds a reference to a list of avaliable tokens.
data State (r: Region) (a: Data) where
        State
         :      (S (Read r)             (Maybe a))      -- ^ peek
         ->     (S (Read r + Write r)   (Maybe a))      -- ^ next
         ->     State r a


stateOfList
        {@r: Region} {@a: Data}
        (xx: List a): S (Alloc r) (State r a)
 = do   ref     = allocRef [r] xx

        -- ISSUE #407: Auto box expressions if the expected type is a suspension.
        -- Shouldn't need the boxes here as the expected types of the fields
        -- are of suspended computations.
        State [r] [a] (box peekRef [r] ref) (box nextRef [r] ref)


peekRef {@r: Region} {@a: Data}
        (ref: Ref r (List a)): S (Read r) (Maybe a)
 = case readRef ref of
        Nil             -> Nothing
        Cons x _        -> Just x


nextRef [r: Region] [a: Data]
        (ref: Ref r (List a)): S (Read r + Write r) (Maybe a)
 = case readRef ref of
        Nil             -> Nothing
        Cons x xs       -> do { writeRef ref xs; Just x }


-------------------------------------------------------------------------------
-- | Peek the next token if there is one available.
peek ((State peek' _):  State r a): S (Read r) (Maybe a)
 = peek'


-- | Take the next token.
next  ((State _ next'): State r a): S (Read r + Write r) (Maybe a)
 = next'


-- | Consume the next token.
shift (s: State r a): S (Read r + Write r) a
 = case next s of
        Nothing -> exit 0
        Just x  -> x


-- | Take the next token if it matches the given predicate, otherwise fail.
take    (s:     State r a)
        (want:  a -> Bool)
        : S (Read r + Write r) (Maybe a)
 = case peek s of
        Nothing         -> Nothing
        Just t
         | want t       -> Just (shift s)
         | otherwise    -> Nothing


-- | Take tokens that match the given predicate.
takeToksWhile
        (s:     State r a)
        (want:  a -> Bool)
        : S (Read r + Write r) (List a)
 = case peek s of
        Nothing         -> Nil
        Just t
         | want t       -> Cons (shift s) (takeToksWhile s want)
         | otherwise    -> Nil

