
module DDC.Core.Codec.SExp.Lexer
export { lexText; lexList; lexSingle }
import DDC.Core.Codec.SExp.Lexer.Token
import DDC.Core.Codec.SExp.Parser.Base
import Class.Show
import Data.Text
import Data.Ref
where

eqChar (c1 c2: Char): Bool
 = eqText (textOfChar c1) (textOfChar c2)

-- | Lex text into SExp tokens.
--
--   ISSUE #406: Auto run and rebox suspension types in the body
--   of private constructs.
--
--   Eliminating the intermediate 'toks' binding here causes it to fail
--   because there is no chance to eliminate the effects of the body.
--
lexText (tx: Text): List Token
 = private r with {Read r; Write r; Alloc r} in
   do   toks    = lexList (run (stateOfList [r] $ charListOfText tx))
        toks


lexList   (s: State r Char)
          : S (Read r + Write r) (List Token)
 = case lexSingle s of
    Nothing     -> Nil
    Just t      -> Cons t (lexList s)


lexSingle (s: State r Char)
          : S (Read r + Write r) (Maybe Token)
 = case peek s of
    Nothing
        ->      Nothing

    Just c
        -- Skip over whitespace.
        | isSpace c
        -> do   shift s
                lexSingle s

        -- Open parens.
        | c == '('
        -> do   shift s
                Just KBra

        -- Close parens.
        | c == ')'
        -> do   shift s
                Just KKet

        -- s-exp constructor.
        | isConStart c
        -> do   cs      = takeToksWhile s isConBody
                tx      = textOfCharList cs
                Just (KWord tx)

        -- String.
        | c == '"'
        -> do   shift s
                cs      = takeToksWhile s (\c' -> c' /= '"')
                tx      = textOfCharList cs
                shift s
                Just (KString tx)

        | otherwise
        ->      Nothing


-- | Character can start an s-exp constructor.
isConStart c
 = isLower c

-- | Character can be part of the body of an s-exp constructor.
isConBody  c
 = isLower c ∨ isUpper c ∨ (c == '_')

