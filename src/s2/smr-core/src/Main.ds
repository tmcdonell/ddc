
-- Shimmer v1.0. The Lambda Machine.
module Main
import SMR.Repl.Command.Load
import SMR.Repl.Error
import SMR.Repl.Args
import SMR.Source.Pretty
import SMR.Source.Token
import SMR.Source.Parser
import SMR.Core.Exp
import SMR.Core.Step
import SMR.Prim.Op
import SMR.Prim.Name
import System.IO.Console
import System.IO.File
import System.Posix.Stdlib
import Main.Args
import Data.Maybe
import Data.Function
import Data.Text.Location
where

-------------------------------------------------------------------------------
data Cmd where
        CmdNone : Cmd
        CmdStep : Exp Name Prim -> Cmd


data State where
        State
         :  Config Name Prim                    -- ^ Parser config.
         -> List (Prim, PrimEval Name Prim)     -- ^ Primitive evaluators.
         -> List (Decl Name Prim)               -- ^ Top-level declarations
         -> State

configOfState
        ((State config _ _): State)
        : Config Name Prim
 = config

primTableOfState
        ((State _ evals _):  State)
        : List (Prim, PrimEval Name Prim)
 = evals

declsOfState
        ((State _ _ decls):  State)
        : List (Decl Name Prim)
 = decls


-- Utils ----------------------------------------------------------------------
--   ISSUE #424: Explicit box keyword required in more places than it should be.
getLine: S Console Text
 = box do
        txt     = run readl 2014
        textOfCharList $ init Nil $ charListOfText txt


-------------------------------------------------------------------------------
main ()
 = do   modes           = smrReplArgs_load
        tsInclude       = smrReplArgs_collectIncludes modes

        -- Build the table of primitive evaluators.
        primEvals
         = makePrimOps ()

        -- Extract a list of primitive names.
        -- ISSUE #422: Explicit type arguments required in some places
        -- that they should not be.
        primNames
         = map (nameOfPrimEval [Text] [Prim]) primEvals

        -- Extract textual names of primitives.
        primNamesText
         = mapMaybe
                (\e -> case e of
                        PrimOp n -> Just n
                        _        -> Nothing)
         $ primNames

        -- Build table of prim name to evaluator.
        primTable = zip primNames primEvals

        -- Build the parser config.
        config
         = Config (\z -> Just z)
                  (\z -> parsePrim primNamesText z)
                  lens_exp_location

        decls   = loadSources config tsInclude
        state   = State config primTable decls
        repl_start state modes


lens_exp_location
        : Lens (Exp Name Prim) (Maybe (Location, Location))
 = lens_make (\xx -> Nothing) (\l xx -> xx)


-------------------------------------------------------------------------------
repl_start (state: State) (args: List Mode): S Console Unit
 = case args of
        Cons (ModeInclude _) args'
         -> repl_start state args'

        Cons (ModeEval name) args'
         -> case steps' state True (XRef (RMac name)) of
                Left err
                 -> writel $ ppr $ ErrorReplRuntime "<command>" err

                Right x'
                 -> writel $ ppr x'

        Nil
         -> do  -- Print out splash line when we start the interactive repl.
                writel "Shimmer, version 1.0. The Lambda Machine."
                repl_loop state CmdNone


-------------------------------------------------------------------------------
-- | Read-Eval-Print loop.
--   ISSUE #423: Closing Shimmer REPL with Control-D causes prompt to print indefinately.
--   ISSUE #424: Explicit box keyword required in more places than it should be.
repl_loop (state: State) (cmd: Cmd): S Console Unit
 = box do
        -- Write the prompt.
        write "> "
        flush

        -- Get the line and convert it to tokens.
        str     = getLine
        result  = lexTokens (Location 1 1)
                $ charListOfText str

        case result of
         -- If only whitespace was provided then run the default command.
         (Cons lt Nil, _, Nil)
          |  valueOfLocated lt == KEnd
          -> case cmd of
                CmdNone    -> repl_loop state CmdNone
                CmdStep xx -> repl_step state xx

         -- We have some tokens, to parse them.
         (toks, _, Nil)
          ->    repl_toks state CmdNone toks

         -- We couldn't lex all the characters into tokens.
         (toks, lStart', cs)
          -> case last toks of
                Just tok
                 |  Cons c _ <- cs
                 -> do  writell $ ppr
                         $ ErrorReplLexer "<interactive>" lStart' (Just c)
                        repl_loop state CmdNone

                _ -> do writell $ ppr
                         $ ErrorReplLexer "<interactive>" lStart' Nothing


-- | Given some tokens, try to parse an expression and evaluate it.
repl_toks
        (state: State) (cmd: Cmd)
        (toks:  List (Located Token))
        :       S Console Unit
 = case parseExp (configOfState state) toks of
        -- Parse succeeded.
        Right x
         ->     repl_step state x

        Left err
         -- Parse failed on some token.
         -> do  writel "! parse error."
                writel $ ppr err
                repl_loop state CmdNone

         -- Parse failed because there was no input,
         -- just read the next line.
         | otherwise
         ->     repl_loop state CmdNone


-- | Given an expression,
--   try to perform a single evaluation step.
repl_step
        (state: State)
        (xx:    Exp Name Prim)
        :       S Console Unit
 = case step' state True xx of
        Left (ResultError err)
         -> do  writell $ ppr $ ErrorReplRuntime  "<interactive>" err
                repl_loop state CmdNone

        Left ResultDone
         -> do  writell "! done."
                repl_loop state CmdNone

        Right x'
         -> do  writell (ppr x')
                repl_loop state (CmdStep x')


-- | Given an expression,
--   try to perform a multi-step evaluation step.
repl_steps
        (state: State)
        (xx:    Exp Name Prim)
        :       S Console Unit
 = case steps' state True xx of
        Left err
         -> do  writell $ ppr $ ErrorReplRuntime  "<interactive>" err
                repl_loop state CmdNone

        Right x'
         -> do  writell $ ppr x'
                repl_loop state CmdNone


-- | Single step an expression.
step'   (state: State)
        (red:   Bool)
        (xx:    Exp Name Prim)
        :       Either Result (Exp Name Prim)
 = step (StepStrength red True)
        (StepContext
                (primTableOfState state)
                (declsOfState state))
         xx


-- | Multi-step an expression.
steps'  (state: State)
        (red:   Bool)
        (xx:    Exp Name Prim)
        :       Either Text (Exp Name Prim)
 = steps
        (StepStrength red True)
        (StepContext
                (primTableOfState state)
                (declsOfState state))
         xx
