
module SMR.Prim.Op.Smr
export makePrimOpsSmr
import SMR.Prim.Op.Base
import SMR.Core.Exp.Push
import SMR.Transform.Combinate
where


-------------------------------------------------------------------------------
-- | Shimmer expression functions reflected back as primops.
makePrimOpsSmr {eqs: Eq s} (_ : Unit): List (PrimEval s Prim)
 = Cons (primOpSmrEqual {eqs})
 $ Cons primOpSmrPushHead
 $ Cons primOpSmrPushDeep
 $ Cons primOpSmrEvalCbv
 $ Cons primOpSmrEvalNo
 $ Cons primOpSmrEvalFail
 $ Cons primOpSmrCombinateSKI
 $ Nil


-------------------------------------------------------------------------------
-- | Equality on expressions.
primOpSmrEqual {Eq s}: PrimEval s Prim
 = PrimEval (PrimOp "smr-equal")        "Syntactic equality of expressions."
            (Cons Val (Cons Val Nil)) fn'
 where fn'  (Cons xA (Cons xB Nil))
        = Just $ makeXBool (xA == xB)


-------------------------------------------------------------------------------
-- | Push to reveal head constructor.
primOpSmrPushHead: PrimEval s Prim
 = PrimEval (PrimOp "smr-push-head")
            "Push down substitutions to reveal head constructor."
            (Cons Exp Nil) fn'
 where  fn' (Cons xx  Nil)
         = pushHead xx


-- | Push deeply in expression.
primOpSmrPushDeep: PrimEval s Prim
 = PrimEval (PrimOp "smr-push-deep")
            "Push down substitutions deeply in expression."
            (Cons Exp Nil) fn'
 where  fn' (Cons xx  Nil)
         = pushDeep xx


-------------------------------------------------------------------------------
-- | Evaluate call-by-value.
primOpSmrEvalCbv: PrimEval s Prim
 = PrimEval (PrimOp "smr-eval-cbv")     "Call-by-value evaluation"
            (Cons Val Nil) fn'
 where fn'  (Cons xF  Nil)
        = do    str     = StepStrength False False
                ctx     = StepContext  Nil Nil
                case xF of
                 XKey KBox xF'
                     -> case steps str ctx xF' of
                         Left err   -> Just $ XRef (RPrm (PrimOp "smr-eval-fail"))
                         Right xF'  -> Just $ XKey KBox xF'

                 xF' -> case steps str ctx xF' of
                         Left  err  -> Just $ XRef (RPrm (PrimOp "smr-eval-fail"))
                         Right xF'  -> Just $ XKey KBox xF'


-- | Evaluate normal-order.
primOpSmrEvalNo: PrimEval s Prim
 = PrimEval (PrimOp "smr-eval-no")      "Normal order evaluation"
            (Cons Val Nil) fn'
 where fn'  (Cons xF  Nil)
        = do    str     = StepStrength True True
                ctx     = StepContext  Nil Nil
                case xF of
                 XKey KBox xF'
                     -> case steps str ctx xF' of
                         Left err   -> Just $ XRef (RPrm (PrimOp "smr-eval-fail"))
                         Right xF'  -> Just $ XKey KBox xF'

                 xF' -> case steps str ctx xF' of
                         Left  err  -> Just $ XRef (RPrm (PrimOp "smr-eval-fail"))
                         Right xF'  -> Just $ XKey KBox xF'


-- | Indicate evaluation failure.
primOpSmrEvalFail: PrimEval s Prim
 = PrimEval (PrimOp "smr-eval-fail")    "Indicate evaluation failure."
            Nil fn'
 where  fn' _ = Nothing


-------------------------------------------------------------------------------
-- ISSUE #418: In Shimmer combinateSKI should not require all combinators
-- to be supplied in the public interface.
primOpSmrCombinateSKI: PrimEval s Prim
 = PrimEval
        (PrimOp "smr-combinate-ski")
        "Convert expression to SKI combinator form."
        (Cons Val (Cons Val (Cons Val                   -- s k i
        (Cons Val (Cons Val                             -- b c
        (Cons Val (Cons Val (Cons Val                   -- sp bs cp
        (Cons Val Nil)))))))))                          -- exp
        fn'
 where
        fn' as0
         | Just (xS,   as1) <- takeArgExp as0
         , Just (xK,   as2) <- takeArgExp as1
         , Just (xI,   as3) <- takeArgExp as2
         , Just (xB,   as4) <- takeArgExp as3
         , Just (xC,   as5) <- takeArgExp as4
         , Just (xSp,  as6) <- takeArgExp as5
         , Just (xBs,  as7) <- takeArgExp as6
         , Just (xCp,  as8) <- takeArgExp as7
         , Just (xExp, Nil) <- takeArgExp as8
         = Just $ XKey KBox
                $ combinate
                        { Combinate
                                (fromBox xS)  (fromBox xK)  (fromBox xI)
                                (fromBox xB)  (fromBox xC)
                                (fromBox xSp) (fromBox xBs) (fromBox xCp)
                        }
                        (fromBox xExp)

         | otherwise
         = Nothing


-- | If this is a boxed expression then unwrap one level of boxing,
--   otherwise return the original expression.
fromBox (xx: Exp s Prim): Exp s Prim
 = case xx of
        XKey KBox x'    -> x'
        _               -> xx
