
module SMR.Prim.Name
export
{       pretty_Prim;
        prettyPrim; parsePrim;
}
import System.Posix.Stdlib
import Class.Show
import Class.Pretty
where


-- | Pretty dictionary for primitives.
pretty_Prim: Pretty Prim
 = Pretty prettyPrim


-- | Pretty print a primitive name, without the leading '#'.
prettyPrim (pp: Prim): Text
 = case pp of
        PrimOp op               -> op

        PrimLitBool True        -> "true"
        PrimLitBool False       -> "false"

        PrimLitNat n            -> "nat'" % showNat n


-- | Parse a primitive name, without the leading '#'.
parsePrim
        (ps: List Text)         -- ^ Valid primitive names.
        (tx: Text)              -- ^ Text string to parse.
        :    Maybe Prim

 -- Literal Bools.
 | tx == "true"  = Just $ PrimLitBool True
 | tx == "false" = Just $ PrimLitBool False

 -- Literal Nats.
 | cs   <- charListOfText tx
 , textOfCharList (take 4 cs) == "nat'"
 , ds   <- drop 4 cs
 , all isDigit ds
 = Just $ PrimLitNat (stdlib_atoi (textOfCharList ds))

 -- Other primitives.
 | elem tx ps   = Just $ PrimOp tx

 -- Unrecognized.
 | otherwise    = Nothing


