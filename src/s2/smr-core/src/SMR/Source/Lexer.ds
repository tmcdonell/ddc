
module SMR.Source.Lexer
export lexTokens
import SMR.Source.Token
import SMR.Core.Exp
import System.Posix.Stdlib
import Control.Parsec
import Class.Show
import Data.Tuple
import Data.Text
import Data.Text.Location
where


-- | Lex a sequence of tokens.
lexTokens
        (lStart0: Location)
        (cs0:     List Char)
        : (List (Located Token), Location, List Char)
 = case skipSpace lStart0 cs0 of
    (lStart, Nil)
     -> ( Cons (Located lStart lStart KEnd) Nil
        , lStart, Nil)

    (lStart, cs)
     -> case lexToken lStart cs of
         Nothing
          -> (Nil, lStart, cs)

         Just (k, cs')
          |  (ks, lStart', cs'') <- lexTokens (endOfLocated k) cs'
          -> (Cons k ks, lStart', cs'')


-- | Lex a single token.
lexToken (lStart: Location)
         (xx:     List Char)
         :        Maybe (Located Token, List Char)
 = case xx of
    Nil
     -> Nothing

    Cons c xs
        -- Punctuation.
        |  isCharPunc c
        -> do   lEnd = incCharOfLocation 1 lStart
                tok  = KPunc c
                Just (Located lStart lEnd tok, xs)

        -- Variable name.
        -- ISSUE #413: Inlining takeSpace into the guard causes an LLVM dominator error.
        |  Just (space, xx')         <- takeSpace c xs
        ,  Just (name, lEnd, csRest) <- lexName   (incCharOfLocation 1 lStart) xx'
        -> do   tok      = KName space name
                Just (Located lStart lEnd tok, csRest)

        --  Natural number.
        |  isDigit c
        ,  Just (nat, lEnd, csRest)  <- lexNat lStart (Cons c xs)
        -> do   tok      = KNat nat
                Just (Located lStart lEnd tok, csRest)

        |  otherwise
        -> Nothing


skipSpace
        (lStart: Location)
        (xx:     List Char)
        :       (Location, List Char)
 = case xx of
    Nil             -> (lStart, xx)
    Cons c cs
        -- Skip whitespace.
        | c == ' '  -> skipSpace (incCharOfLocation 1 lStart) cs
        | c == '\n' -> skipSpace (incLineOfLocation 1 lStart) cs
        | c == '\t' -> skipSpace (incCharOfLocation 8 lStart) cs

        -- Skip comments
        |  c == '-'
        ,  Cons c2 cs2 <- cs
        ,  c2 == '-'
        -> skipSpace lStart $ dropWhile (\x -> x /= '\n') cs2

        | otherwise -> (lStart, xx)


-- | Lex a variable name.
lexName (lStart: Location) (xx: List Char)
        : Maybe (Name, Location, List Char)
 = go lStart Nil xx
 where
        go lStart' acc Nil
         = do   name    = textOfCharList (reverse acc)
                Just (name, lStart', Nil)

        go lStart' acc (Cons c cs)
         | isNameBodyChar c
         =      go (incCharOfLocation 1 lStart') (Cons c acc) cs

         | otherwise
         = do   name    = textOfCharList (reverse acc)
                Just (name, lStart', Cons c cs)


-- | Lex a natural number.
lexNat  (lStart: Location) (xx: List Char)
        : Maybe (Nat, Location, List Char)
 = go lStart Nil xx
 where
        go lStart' acc Nil
         | Just nat <- readNat (textOfCharList (reverse acc))
         = Just (nat, lStart', Nil)

        go lStart' acc (Cons c cs)
         | isDigit c
         =      go (incCharOfLocation 1 lStart') (Cons c acc) cs

         | Just nat <- readNat (textOfCharList (reverse acc))
         = Just (nat, lStart', Cons c cs)

        go _ _
         = Nothing


-- ISSUE #413: Infix parser does not allow multiple \lor in expression
isNameBodyChar (c: Char): Bool
 = isLower c ∨ (isUpper c ∨ (isDigit c ∨ (c == '-' ∨ (c == '\'' ∨ c == '_'))))


-- | Take the namespace qualifier from the front of a name.
takeSpace (c: Char) (cs: List Char)
          : Maybe (Space, List Char)
 | isLower c ∨ isLower c
                = Just (SVar, Cons c cs)
 | c == '@'     = Just (SMac, cs)
 | c == '+'     = Just (SSet, cs)
 | c == '%'     = Just (SSym, cs)

 | c  == '#'
 , Cons c' cs' <- cs
 , c' == '#'
 = Just (SKey, cs')

 | c == '#'     = Just (SPrm, cs)
 | otherwise    = Nothing


-- | Check if this is a punctuation character.
isCharPunc (c: Char): Bool
 | c == '('     = True
 | c == ')'     = True
 | c == '{'     = True
 | c == '}'     = True
 | c == '['     = True
 | c == ']'     = True
 | c == '<'     = True
 | c == '>'     = True
 | c == '^'     = True
 | c == ','     = True
 | c == ':'     = True
 | c == '\\'    = True
 | c == '.'     = True
 | c == ';'     = True
 | c == '='     = True
 | c == '$'     = True
 | c == '!'     = True
 | c == '~'     = True
 | otherwise    = False

