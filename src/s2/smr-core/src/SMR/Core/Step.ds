
module SMR.Core.Step
export { step; steps }
import SMR.Core.Exp
where


-------------------------------------------------------------------------------
-- | Evaluation strength.
data StepStrength where
        StepStrength
         :  Bool                    -- ^ Reduce under lambdas.
         -> Bool                    -- ^ Reduce args when head is not an abs.
         -> StepStrength


-- | Evaluation context.
data StepContext (s p: Data) where
        StepContext
         :  List (p, PrimEval s p)  -- ^ Primitive operator evaluators.
         -> List (Decl s p)         -- ^ Top-level declarations.
         -> StepContext s p


-- | Describe the result of an evaluation.
data Result where
        ResultDone  : Result
        ResultError : Text -> Result


-------------------------------------------------------------------------------
-- | Multi-step reduction to normal form.
steps   {Eq p} {Show p}
        (str: StepStrength) (ctx: StepContext s p)
        (xx:  Exp s p)
        :     Either Text (Exp s p)
 = case step str ctx xx of
        Left ResultDone         -> Right xx
        Left (ResultError err)  -> Left err
        Right xx'               -> steps str ctx xx'


-------------------------------------------------------------------------------
-- | Single step reduction.
step    {Eq p} {Show p}
        (str: StepStrength) (ctx: StepContext s p)
        (xx:  Exp s p)
        :     Either Result (Exp s p)
 = case xx of
        -- Evaluate multiple values left to right.
        XRet xs
         -> case stepFirstVal xs of
                Left  res       -> Left res
                Right xs'       -> Right $ makeXRet xs'

        -- Reference
        XRef ref
         -> case ref of
                -- Expand macros.
                RMac n
                 | StepContext _ decls  <- ctx
                 -> case lookupDecl n decls of
                        Nothing -> Left ResultDone
                        Just x  -> Right x

                -- Leave other references as-is.
                _               -> Left ResultDone

        -- Variable
        XVar _ _        -> Left ResultDone

        -- Abstraction
        XAbs ns1 x2
         -- Reduce the body of the abstraction if requested.
         |  StepStrength True _     <- str
         ,  Right x2'               <- step str ctx x2
         -> Right $ XAbs ns1 x2'

         -- Otherwise treat all abstractions as values.
         |  otherwise
         -> Left ResultDone

        -- Application
        XApp _ _
         -- Unzip the spine and try to step the functional expression first.
         | Just (xF, xsArgs) <- takeXApps xx
         -> case step (StepStrength False False) ctx xF of
             -- Functional expression makes progress.
             Right xF'                  -> Right $ makeXApps xF' xsArgs

             -- Eval of functional expression failed.
             Left err@(ResultError _)   -> Left err

             -- Functional expression is done.
             Left ResultDone
              -> case xF of
                  XRef (RPrm primF)  -> stepAppPrim primF xsArgs
                  XAbs nsParam xBody -> stepAppAbs  nsParam xBody xsArgs
                  XKey KSeq    xBody -> stepAppSeq  xBody   xsArgs
                  XKey KTag    xBody -> stepAppTag  xBody   xsArgs

                  -- Functional expression is inactive, but optionally
                  -- continue reducing arguments to eliminate all the redexes
                  -- in the expression.
                  _ |  StepStrength _ True <- str
                    -> case stepFirstVal xsArgs of
                          Right xsArgs'   -> Right $ makeXApps xF xsArgs'
                          Left  res       -> Left res

                    |  otherwise
                    -> Left ResultDone

        -- Substitution train.
        XSub _ _
         -> case pushHead xx of
                Nothing  -> Left ResultDone
                Just xx' -> Right xx'

        -- Boxed expressions are already normal forms.
        XKey KBox _
         -> Left ResultDone

        -- Run a boxed expression.
        XKey KRun x1
         -> case step (StepStrength False False) ctx x1 of
                -- Body makes progress.
                Right x1'
                 -> Right (XKey KRun x1')

                -- Body expression failed.
                Left  err@(ResultError _)
                 -> Left err

                -- If the body expression is a box then unwrap it,
                -- otherwise just return the value as-is.
                Left  ResultDone
                 -> case x1 of
                        XKey KBox x11   -> Right x11
                        _               -> Right x1

        -- Step the body of a seq expression.
        XKey KSeq x
         -> case stepFirstVal (Cons x Nil) of
                Right xs' -> Right $ XKey KSeq (makeXRet xs')
                Left err  -> Left err

        -- Tag expressions are always done.
        XKey KTag x       -> Left ResultDone


-------------------------------------------------------------------------------
-- | Step an application of a primitive operator to its arguments.
stepAppPrim
        {Eq p} {Show p}
        {ctx:   StepContext s p}
        (prim:  p) (xsArgs: List (Exp s p))
        : Either Result (Exp s p)
 | StepContext esPrim _     <- ctx
 = case lookup prim esPrim of
        Nothing         -> Left ResultDone
        Just primEval   -> stepPrim primEval xsArgs


-------------------------------------------------------------------------------
-- | Step an application of an abstraction to its arguments.
stepAppAbs
        {Eq p} {Show p}
        {str:     StepStrength} {ctx:   StepContext s p}
        (psParam: List Param)   (xBody: Exp s p) (xsArgs: List (Exp s p))
        : Either Result (Exp s p)
   -- Default evaluation method is call-by-value, so first reduce the args.
 = do   arity           = length psParam
        args            = length xsArgs
        xsArgs_sat      = take arity xsArgs
        xsArgs_remain   = drop arity xsArgs
        fsParam_sat     = map formOfParam psParam

        case stepFirst xsArgs_sat fsParam_sat of
         -- One of the arguments makes progress.
         Right xsArgs_sat'
          -> do xFun    = XAbs psParam xBody
                Right $ makeXApps (makeXApps xFun xsArgs_sat') xsArgs_remain

         -- Stepping one of the argument failed.
         Left err@(ResultError _)
          -> Left err

         -- The arguments are all done.
         Left ResultDone
          -> do
                -- Saturated application.
                if args == arity
                 then do
                    nsParam     = map nameOfParam psParam
                    snv         = snvOfNamesArgs nsParam xsArgs
                    Right $ snvApply False snv xBody

                 -- Under application
                 else if args < arity
                 then do

                    psParam_sat    = take args psParam
                    nsParam_sat    = map nameOfParam psParam_sat
                    psParam_remain = drop args psParam
                    snv            = snvOfNamesArgs nsParam_sat xsArgs_sat
                    Right $ XApp  (snvApply False snv $ XAbs psParam_remain xBody)
                                  (makeXRet xsArgs_remain)

                 else do
                    nsParam        = map nameOfParam psParam
                    snv            = snvOfNamesArgs nsParam xsArgs_sat
                    Right $ XApp  (snvApply False snv xBody)
                                  (makeXRet xsArgs_remain)


-------------------------------------------------------------------------------
-- | Step an application of the ##seq super prim.
stepAppSeq
        {str:    StepStrength} {ctx: StepContext s p}
        (xBody:  Exp s p)      (xsArgs: List (Exp s p))
        : Either Result (Exp s p)

 -- Application of a seq to an abstraction.
 -- As we can see the abstraction, build the substitution directly without
 -- going through an intermediate application.
 | Cons xArg1 xsArgs'   <- xsArgs
 , XAbs ps11  x12       <- fromMaybe xArg1 (pushHead xArg1)
 , Cons p1    ps11'     <- ps11
 = do   n1      = nameOfParam p1
        snv     = snvOfNamesArgs (Cons n1 Nil) (Cons xBody Nil)
        car     = CSim snv
        cars    = Cons car Nil
        Right $ makeXApps (trainApply cars $ makeXAbs ps11' x12) xsArgs'

 -- Application of a seq to something that isn't yet an abstraction.
 | otherwise
 =      Right $ makeXApps (XKey KSeq xBody) xsArgs


-------------------------------------------------------------------------------
-- | Step an application of the ##tag superprim.
stepAppTag
        {Eq p} {Show p}
        {str:   StepStrength} {ctx: StepContext s p}
        (xBody: Exp s p)      (xsArgs: List (Exp s p))
        : Either Result (Exp s p)
 = case stepFirstVal xsArgs of
        Left res        -> Left res
        Right xsArgs'   -> Right $ makeXApps (XKey KTag xBody) xsArgs'


-------------------------------------------------------------------------------
-- | Step an application of a primitive operator to some arguments.
stepPrim
        {Eq p} {Show p}
        {ctx:   StepContext s p}
        (pe:    PrimEval s p) (xsArg: List (Exp s p))
        :       Either Result (Exp s p)
 | PrimEval prim desc csArg eval <- pe
 = evalArgs csArg xsArg Nil
 where
        -- Evaluation of arguments is complete.
        evalArgs Nil Nil xsArgsDone
         = case eval (reverse xsArgsDone) of
                Just xResult    -> Right xResult
                Nothing         -> Left ResultDone

        -- We have more args than the primitive will accept.
        evalArgs Nil xsArgsRemain xsArgsDone
         = case eval (reverse xsArgsDone) of
                Just xResult    -> Right $ XApp xResult (makeXRet xsArgsRemain)
                Nothing         -> Left ResultDone

        -- Evaluate the next argument if neeeded.
        evalArgs (Cons cArg' csArg') (Cons xArg' xsArg') xsArgsDone
         -- Primitive does not demand a value for this arg.
         | Exp  <- cArg'
         = evalArgs csArg' xsArg' (Cons xArg' xsArgsDone)

         -- Primitive demands a value for this arg.
         = case step (StepStrength False False) ctx xArg' of
                Left err@(ResultError _)
                 -> Left err

                Left ResultDone
                 -> evalArgs csArg' xsArg' (Cons xArg' xsArgsDone)

                Right xArg''
                 -> Right $ makeXApps (XRef (RPrm (nameOfPrimEval pe)))
                          $ append (reverse xsArgsDone) (Cons xArg'' xsArg')

        -- We have less args than the prim will accept,
        -- so leave the application as it is.
        evalArgs _ Nil xsArgsDone
         = Left ResultDone


-------------------------------------------------------------------------------
-- | Step the first available expression in a list.
--   This also flattens them out, so at the top level of the result
--   we won't have nested XRets.
stepFirstVal
        {Eq p} {Show p}
        {str: StepStrength}  {ctx: StepContext s p}
        (xx:  List (Exp s p))
        :     Either Result (List (Exp s p))
 = stepFirst xx (replicate (length xx) FVal)

stepFirst
        {Eq p} {Show p}
        {str: StepStrength}  {ctx: StepContext s p}
        (xx:  List (Exp s p))
        (ff:  List Form)
        :     Either Result (List (Exp s p))
 = case (xx, ff) of
        (Nil, _)   -> Left ResultDone
        (_,   Nil) -> Left ResultDone

        (Cons x1 xs2, Cons f1 fs2)
         |  FExp <- f1
         -> case stepFirst xs2 fs2 of
                Left r          -> Left r
                Right xs2'      -> Right $ Cons x1 xs2'

         | otherwise
         -> case step str ctx x1 of
                Left err@(ResultError _)
                 -> Left err

                Left ResultDone
                 |  XRet xs1  <- x1
                 -> Right $ append xs1 xs2

                 |  otherwise
                 -> case stepFirst xs2 fs2 of
                        Left  r    -> Left r
                        Right xs2' -> Right $ Cons x1  xs2'

                Right x1'          -> Right $ Cons x1' xs2

