
-- | Equality on Shimmer expressions.
module SMR.Core.Exp.Eq
export {eq_Exp; eq_Key; eq_Car; eq_Snv; eq_Ups; eq_Ref}
import SMR.Core.Exp.Push
import SMR.Core.Exp.Base
import Class.Eq
where


-- | Equality dictionary for expressions.
--   TODO: should not need explicit type arguments here.
eq_Exp {@s p: Data} {Eq s} {Eq p}: Eq (Exp s p)
 = Eq   (\x1 x2 -> smr_eqExp [s] [p] x1 x2)
        (\x1 x2 -> not $ smr_eqExp   x1 x2)


smr_eqExp {@s p: Data} {Eq s} {Eq p} (x1 x2: Exp s p): Bool
 = case (x1, x2) of
        (XRet xs1,      XRet xs2)
         | length xs1 == length xs2
         → all (eq True) $ zipWith smr_eqExp xs1 xs2

        (XRef r1,       XRef r2)
         → r1 == r2

        (XVar n1 d1,    XVar n2 d2)
         | n1 == n2             → d1 == d2
         | otherwise            → False

        (XApp x11 x12,  XApp x21 x22)
         | smr_eqExp x11 x21    → smr_eqExp x12 x22
         | otherwise            → False

        (XAbs ns11 x12, XAbs ns21 x22)
         | ns11 == ns21         → smr_eqExp x12 x22
         | otherwise            → False

        (XSub cs11 x12, _)
         | Just x1'     ← pushHead x1
         → smr_eqExp x1' x2

        (_, XSub cs21 x22)
         | Just x2'     ← pushHead x2
         → smr_eqExp x1 x2'

        (XSub cs11 x12, XSub cs21 x22)
         | cs11 == cs21         → smr_eqExp x12 x22
         | otherwise            → False

        (XKey k11  x12, XKey k21  x22)
         | k11  == k21          → smr_eqExp x12 x22
         | otherwise            → False

        _                       → False


-- | Equality dictionary for parameters.
eq_Param: Eq Param
 = Eq   eq' neq'
 where
        eq' (PParam n1 f1) (PParam n2 f2)
                        = n1 == n2 ∧ f1 == f2

        neq' p1 p2      = not $ eq p1 p2


-- | Equality dictionary for expression forms.
eq_Form: Eq Form
 = Eq   eq' neq'
 where
        eq' FVal        FVal    = True
        eq' FExp        FExp    = True
        eq' _           _       = False

        neq' f1 f2              = not $ eq' f1 f2


-- | Equality dictionary for expression keys.
eq_Key: Eq Key
 = Eq   smr_eqKey
        (\k1 k2 -> not $ smr_eqKey k1 k2)


smr_eqKey (k1 k2: Key): Bool
 = case (k1, k2) of
        (KBox, KBox)    -> True
        (KRun, KRun)    -> True
        (KSeq, KSeq)    -> True
        (KTag, KTag)    -> True
        _               -> False


-- | Equality dictionary for train cars.
eq_Car {@s p: Data} {Eq s} {Eq p}: Eq (Car s p)
 = Eq   (\c1 c2 -> smr_eqCar [s] [p] c1 c2)
        (\c1 c2 -> not $ smr_eqCar   c1 c2)


smr_eqCar {@s p: Data} {Eq s} {Eq p} (c1 c2: Car s p): Bool
 = case (c1, c2) of
        (CSim snv1,     CSim snv2)      -> smr_eqSnv snv1 snv2
        (CRec snv1,     CRec snv2)      -> smr_eqSnv snv1 snv2
        (CUps ups1,     CUps ups2)      -> smr_eqUps ups1 ups2
        _                               -> False


-- | Equality dictionary for substitutions.
eq_Snv {@s p: Data} {Eq s} {Eq p}: Eq (Snv s p)
 = Eq   smr_eqSnv
        (\snv1 snv2 -> not $ smr_eqSnv snv1 snv2)


smr_eqSnv {@s p: Data} {Eq s} {Eq p} (snv1 snv2: Snv s p): Bool
 = case (snv1, snv2) of
        (SSnv bs1,      SSnv bs2)       -> smr_eqBinds bs1 bs2
        _                               -> False

smr_eqBinds
        {@s p: Data} {Eq s} {Eq p}
        (bs1 bs2: List ((Name, Nat), Exp s p)): Bool
 = case (bs1, bs2) of
        (Nil, Nil)      -> True

        (  Cons ((name1, depth1), x1) xs1
         , Cons ((name2, depth2), x2) xs2)
         |  name1 == name2, depth1 == depth2, smr_eqExp x1 x2
         -> smr_eqBinds xs1 xs2

        _               -> False


-- | Equality dictionary for Ups.
eq_Ups (ups1 ups2: Ups): Eq Ups
 = Eq   smr_eqUps
        (\ups1 ups2 -> not $ smr_eqUps ups1 ups2)


smr_eqUps (ups1 ups2: Ups): Bool
 = case (ups1, ups2) of
        (UUps us1,      UUps us2)       -> smr_eqBumps us1 us2
        _                               -> False

smr_eqBumps (bs1 bs2: List UpsBump): Bool
 = case (bs1, bs2) of
        (Nil, Nil)      -> True

        (  Cons ((name1, depth1), inc1) xs1
         , Cons ((name2, depth2), inc2) xs2)
         |  name1 == name2, depth1 == depth2, inc1 == inc2
         -> smr_eqBumps xs1 xs2

        _               -> False


-- | Equality dictionary for references.
eq_Ref    {@s p: Data} {Eq s} {Eq p}: Eq (ExpRef s p)
 = Eq   (\x1 x2 -> smr_eqRef [s] [p] x1 x2)
        (\x1 x2 -> not $ smr_eqRef   x1 x2)

smr_eqRef {@s p: Data} {Eq s} {Eq p} (r1 r2: ExpRef s p): Bool
 = case (r1, r2) of
        (RSym s1,       RSym s2)        -> s1 == s2
        (RPrm p1,       RPrm p2)        -> p1 == p2
        (RMac n1,       RMac n2)        -> n1 == n2
        (RSet n1,       RSet n2)        -> n1 == n2

