
-- | Primitives for constructing and destructing 64-bit heap objects.
--
--   IMPORTANT: Only one of 'Object64' or 'Object32' is linked into the DDC
--   runtime system. It is also the /only/ module that knows about the layout
--   of heap objects. All access to heap objects must go through the interface
--   provided by this module.
--
--   All 64-bit heap objects start with a 32-bit word containing the constructor
--   tag of the object and a format field in the least-significant byte.
--
--   OBJECT
--   ~~~~~~
--   byte    3    2    1     0          (in MSB order)
--          TAG2 TAG1 TAG0 FORMAT ...
--
--   FORMAT field
--   ~~~~~~~~~~~~
--   bit     7  6  5  4  3  2  1  0
--           -- arg ---  -- obj ---
--           X  X  X  X  X  X  0  0  -- Forward / Broken-Heart
--           X  X  X  X  a  X  X  X  -- Anchor flag
--           0  0  0  1  a  0  0  1  -- Thunk
--           0  0  1  0  a  0  0  1  -- DataBoxed
--           0  0  1  1  a  0  0  1  -- DataRaw
--           0  1  0  0  a  0  0  1  -- DataMixed
--           0  1  0  1  a  0  0  1  -- SuspIndir
--           -- size --  a  0  1  1  -- DataRawSmall
--
--   Data GC Forwarding / Broken-Heart pointers.
--     During garbage collection, after the GC copies an object to the
--     "to-space" its header in the "from-space" is overwritten with a pointer
--     to where the "to-space" version of the object is.
--
--     We can identify these pointers because their lowest 2 bits are always 00.
--     This is because objects in the heap are always 4-byte aligned.
--
--     For all other values of the format field, we ensure the lowest two bits
--     are not 00.
--
--   Data Anchor flag
--     If bit 3 in the format field is set then the GC is not permitted to move
--     the object. This is useful when the object has been allocated by malloc
--     and exists outside the DDC runtime's garbage collected heap.
--
--   Data Data{Boxed, Mixed, Raw, RawSmall}
--     There are four data object formats:
--      DataBoxed:    A boxed object containing pointers to more heap objects.
--      DataMixed:    Some heap pointers, and some raw data.
--      DataRaw:      Contains raw data and no pointers.
--      DataRawSmall: Contains raw data where the size is small enough to
--                    encode directly in the format field.
--
--     The -obj- (object mode) portion of the format field can be used to
--     determine if the object is a forwarding pointer, has a fixed value for
--     its format field, or is a DataRS object.
--
--   FORMAT enum
--   ~~~~~~~~~~~
--   Code which needs to query the format of a heap object can use
--   `formatOfObject`, which transforms the format field described above in
--   to a more direct representation:
--
--      Unknown      = 0#
--      Forward      = 1#
--      Thunk        = 2#
--      DataBoxed    = 3#
--      DataRaw      = 4#
--      DataMixed    = 5#
--      DataRawSmall = 6#
--      SuspIndir    = 7#
--
--   Note: 64-bit floats.
--   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
--   The various object formats always contain an even number of 32-bit words
--   in the header portion, before the payload. This ensures that the payloads
--   of all heap objects are 8-byte aligned. We do this to support architectures
--   that cannot load misaligned double precision floats (Float64). Architectures
--   that can load them typically suffer a penalty, so it is good to align heap
--   objects anyway.
--
module Runtime.Object

export value
 -- Get the tag of an object.
 ddcTagOfObject         : [r: Region]. Ptr# r Obj  -> Tag#
 ddcFormatOfObject      : [r: Region]. Ptr# r Obj  -> Nat#
 ddcFormatFieldOfObject : [r: Region]. Ptr# r Obj  -> Word8#
 ddcIsAnchored          : [r: Region]. Ptr# r Obj  -> Bool#

 ddcSizeOfObject        : [r:     Region]. Ptr# r Obj  -> Nat#
 ddcHeaderSizeOfObject  : [r:     Region]. Ptr# r Obj  -> Nat#
 ddcReadBrokenHeart     : [r1 r2: Region]. Ptr# r1 Obj -> Ptr# r2 Obj
 ddcWriteBrokenHeart    : [r1 r2: Region]. Ptr# r1 Obj -> Ptr# r2 Obj -> Void#

 -- Thunk initialization.
 ddcAllocThunk       : [r1:    Region]. Addr# -> Nat# -> Nat# -> Nat# -> Nat# -> Ptr# r1 Obj
 ddcCopyThunk        : [r1 r2: Region]. Ptr# r1 Obj -> Ptr# r2 Obj -> Nat# -> Nat# -> Ptr# r2 Obj
 ddcExtendThunk      : [r1 r2: Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj

 ddcFunThunk         : [r1:    Region]. Ptr# r1 Obj -> Addr#
 ddcParamsThunk      : [r1:    Region]. Ptr# r1 Obj -> Nat#
 ddcBoxesThunk       : [r1:    Region]. Ptr# r1 Obj -> Nat#
 ddcArgsThunk        : [r1:    Region]. Ptr# r1 Obj -> Nat#
 ddcRunsThunk        : [r1:    Region]. Ptr# r1 Obj -> Nat#

 ddcSetThunk         : [r1 r2: Region]. Ptr# r1 Obj -> Nat# -> Nat# -> Ptr# r2 Obj -> Void#
 ddcGetThunk         : [r1 r2: Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj

 -- Objects with just pointers to boxed things.
 ddcAllocBoxed       : [r1:    Region]. Tag# -> Nat# -> Ptr# r1 Obj
 ddcArityOfBoxed     : [r:     Region]. Ptr# r Obj   -> Nat#
 ddcGetBoxed         : [r1 r2: Region]. Ptr# r1 Obj  -> Nat# -> Ptr# r2 Obj
 ddcSetBoxed         : [r1 r2: Region]. Ptr# r1 Obj  -> Nat# -> Ptr# r2 Obj -> Void#

 -- Object with mixed pointers and raw, non-pointer data.
 ddcAllocMixed       : [r1:    Region]. Tag# -> Nat# -> Nat# -> Ptr# r1 Obj
 ddcArityOfMixed     : [r:     Region]. Ptr# r Obj   -> Nat#
 ddcGetMixed         : [r1 r2: Region]. Ptr# r1 Obj  -> Nat# -> Ptr# r2 Obj
 ddcPayloadMixed     : [r1:    Region]. Ptr# r1 Obj  -> Ptr# r1 Word8#

 -- Objects containing raw non-pointer data.
 ddcAllocRaw         : [r1:    Region]. Tag# -> Nat# -> Ptr# r1 Obj
 ddcPayloadRaw       : [r1:    Region]. Ptr# r1 Obj  -> Ptr# r1 Word8#
 ddcPayloadSizeRaw   : [r1:    Region]. Ptr# r1 Obj  -> Nat#

 -- Objects with small, raw non-pointer data.
 ddcAllocSmall       : [r1:    Region]. Tag# -> Nat# -> Ptr# r1 Obj
 ddcPayloadSmall     : [r1:    Region]. Ptr# r1 Obj  -> Ptr# r1 Word8#
 ddcPayloadSizeSmall : [r1:    Region]. Ptr# r1 Obj  -> Nat#


import value
 -- Invoke the garbage collector.
 -- We need to relaim at least the given number of bytes,
 -- otherwise we cannot continue execution.
 ddcAllocCollect      : Nat# -> Unit
 primFailString       : TextLit# -> Void#
 primStdoutPutString  : TextLit# -> Void#
 primShowAddr         : Addr# -> TextLit#
 primShowNat          : Nat#  -> TextLit#
 primShowWord32       : Word32#  -> TextLit#

with letrec


-- Object ---------------------------------------------------------------------
-- | Get the header bits of an object.
ddcHeaderOfObject [r : Region] (obj : Ptr# r Obj) : Word32#
 = do
        ptr             = castPtr# obj
        peek# ptr


-- | Get the constructor tag of an object.
ddcTagOfObject [r: Region] (obj: Ptr# r Obj): Tag#
 = do
        header          = ddcHeaderOfObject obj
        tag32           = shr#  header 8w32#
        promote# tag32


--| Get the format field bits of an object.
ddcFormatFieldOfObject [r : Region] (obj : Ptr# r Obj) : Word8#
 = do
        header          = ddcHeaderOfObject obj
        truncate# [Word8#] [Word32#] header


-- | Get the arg portion of an object's format field.
ddcArgOfObject [r : Region] (obj : Ptr# r Obj) : Nat#
 = do
        formatField     = ddcFormatFieldOfObject obj
        arg8            = shr# (band# formatField 0b11110000w8#) 4w8#
        promote# arg8


--| Get the format of an object.
ddcFormatOfObject [r : Region] (obj : Ptr# r Obj) : Nat#
 = do
        formatField     = ddcFormatFieldOfObject obj

        case band# formatField 0b11w8# of
          0b00w8#       -> 1# -- Forward
          0b01w8#       -> ddcFormatOfObject_arg formatField
          0b11w8#       -> 6# -- DataRawSmall
          _ -> do
                  header = ddcHeaderOfObject obj
                  ddcFailObj obj "ddcFormatOfObject"# "unrecognized object format"#
                  0#


ddcFormatOfObject_arg (formatField : Word8#) : Nat#
 = do
        case band# formatField 0b11110000w8# of
          0b00010000w8# -> 2# -- Thunk
          0b00100000w8# -> 3# -- DataBoxed
          0b00110000w8# -> 4# -- DataRaw
          0b01000000w8# -> 5# -- DataMixed
          0b01010000w8# -> 7# -- SuspIndir
          _             -> 0# -- Unknown


--| Get the size of an object.
ddcSizeOfObject [r: Region] (obj: Ptr# r Obj): Nat#
 = let  n       = ddcFormatOfObject obj
   in case n of
        1# -> do ddcFailObj obj "ddcSizeOfObject"# "unexpected forward"#
                 0#

        2# -> ddcSizeOfThunk  obj
        3# -> ddcSizeOfBoxed  obj
        4# -> ddcSizeOfRaw    obj
        5# -> ddcSizeOfMixed  obj
        6# -> ddcSizeOfSmall  obj

        _  -> do ddcFailObj obj "ddcSizeOfObject"# "unrecognized object"#
                 0#

-- | Get the header size of an object, in bytes.
--   This is also the minimum size an object of that format could be.
--
--   This function only reads the first 32-bit word of the object,
--   which contains the format field, and can determine the header length
--   based on just this word. As it does not need to read any other fields,
--   this function can be used as the first step in validating a possibly
--   corrupted object.
--
ddcHeaderSizeOfObject [r: Region] (obj: Ptr# r Obj): Nat#
 = case ddcFormatOfObject obj of
        1# -> do ddcFailObj obj  "ddcHeaderSizeOfObject"# "unexpected forward"#
                 0#

        2# -> 16#       -- Thunk
        3# -> 8#        -- Boxed
        4# -> 8#        -- Raw
        5# -> 16#       -- Mixed
        6# -> 4#        -- Small

        _  -> do ddcFailObj obj "ddcHeaderSizeOfObject"# "unrecognized object"#
                 0#


-- Forwarding Pointers --------------------------------------------------------
--   When an object is moved from the 'from' space to the 'to' space,
--   its header is overwritten with a forwarding pointer (aka broken heart)
--   to its new location.
--
--   This forwarding pointer is written over the 32 bit header of the object in
--   the from space. As heap objects are always 4 byte aligned, the lowest
--   two bits of the pointer are zero, and we use this to distinguish forwarding
--   pointers from regular objects.
--
--   The header is only 32 bits, but we need to store a 64 bit pointer.
--
--   We have to put the LOW half in the header, so that the lowest two bits are
--   still zero. The HIGH half goes after this. This happens automatically on
--   little-endian systems, but on big-endian systems we have to do it manually.


-- | Reads a forwarding pointer from an overwritten heap object.
ddcReadBrokenHeart
        [r1 r2 : Region]
        (obj   : Ptr# r1 Obj)
               : Ptr# r2 Obj
 =      ddcReadBrokenHeart_le obj

ddcReadBrokenHeart_le
        [r1 r2 : Region]
        (obj   : Ptr# r1 Obj)
               : Ptr# r2 Obj
 =      read# (takePtr# obj) 0#


-- | Replaces a heap object with a forwarding pointer to its new location.
ddcWriteBrokenHeart
        [r1 r2  : Region]
        (obj    : Ptr# r1 Obj)
        (newObj : Ptr# r2 Obj)
                : Void#
 =      ddcWriteBrokenHeart_le obj newObj

ddcWriteBrokenHeart_le
        [r1 r2  : Region]
        (obj    : Ptr# r1 Obj)
        (newObj : Ptr# r2 Obj)
                : Void#
 =      write# (takePtr# obj) 0# newObj


-- Anchored Objects -----------------------------------------------------------
-- | Check if an object is anchored. Anchored objects are allocated outside of
--   the DDC heap and will be left alone by the garbage collector.
--
ddcIsAnchored [r : Region] (obj : Ptr# r Obj) : Bool#
 = do
        formatField     = ddcFormatFieldOfObject obj

        case band# formatField 0b1000w8# of
          0b1000w8# -> True#
          _         -> False#


-- Thunk ----------------------------------------------------------------------
-- | Allocate a Thunk
--   The payload contains a code pointer to the top-level supercombinator,
--   along with pointers to any available arguments. The actual pointer values
--   for the arguments are undefined.
--
--   Note that unlike the GHC runtime we don't use a separate PAP
--   (Partial Application) object type to store partially applied arguments.
--   To perform a partial application we just create a new Thunk, copy the old
--   arguments into it, and write the extra partially applied arguments into the
--   new thunk. This is done to keep the implementation complexity down, and we
--   haven't performed any concrete performance comparisons between the two
--   approaches.
--
--   For the GHC approach see:
--    How to make a fast curry, push/enter vs eval apply.
--    Simon Marlow and Simon Peyton Jones.
--    Journal of Functional Programming, 2006.
--
--   A thunk wraps a top-level super of the following form:
--    f = /\a1 .. /\an. \x1 .. \xn. box .. box. body
--
--   The type   parameters a1 .. an are not represented at runtime.
--
--   The value  parameters x1 .. xn are counted in the boxes field.
--    We need to collect this many applied arguments in the thunk before
--    we can call the super.
--
--   The boxes  box .. box are counted in the boxes field of the thunk.
--    We need to run the thunk this many times before calling the super.
--    the expression 'box body' is equivalent to (\(_ : Void#). body),
--    and running it eliminates the outer lambda.
--
--   typedef struct
--   {   uint32_t  tagFormat;     // Constructor tag and format field.
--       uint8_t   params;        // Value parameters of super.
--       uint8_t   boxes;         // Number of runs required.
--       uint8_t   args;          // Available arguments.
--       uint8_t   runs;          // Number of times we've been run so far.
--       Fun*      fun;           // Function pointer.
--       Obj*      payload[];     // Pointers to available arguments.
--   } Thunk;
--
ddcAllocThunk
        [r: Region] (fun: Addr#)
        (params: Nat#) (boxes: Nat#)
        (args:   Nat#) (runs:  Nat#)
        : Ptr# r Obj
 = do
        -- The payload needs to be big enough to store pointers to the
        -- current available args.
        bytesObj        = ddcSizeOfThunk_args args

        case check# bytesObj of
         True#  -> ()
         False# -> ddcAllocCollect bytesObj

        ddcAllocThunk_ok fun params boxes args runs bytesObj


ddcAllocThunk_ok [r: Region] (fun:  Addr#)
        (params:   Nat#) (boxes: Nat#)
        (args:     Nat#) (runs:  Nat#)
        (bytesObj: Nat#)
        : Ptr# r Obj
 = do
        -- Alloc and zero whole object because the Salt code generator
        -- does not guarantee that no more allocations will be performed
        -- before the argument pointers have been written.
        addr            = alloc# bytesObj
        set# addr 0w8# bytesObj

        -- The tag of thunks is set to all 1 bits to make them easy to identify.
        tag32           = 0xffffff00w32#
        format          = 0b00010001w32#
        header          = bor# tag32 format
        write# addr 0# header

        -- Truncate params to 8-bits and write to object.
        params8         = truncate# [Word8#] [Nat#] params
        write# addr 4# params8

        -- Truncate boxes  to 8-bits and write to object.
        boxes8          = truncate# [Word8#] [Nat#] boxes
        write# addr 5# boxes8

        -- Truncate args count to 8-bits and write to object.
        args8           = truncate# [Word8#] [Nat#] args
        write# addr 6# args8

        -- Truncate runs count to 8-bits and write to object.
        runs8           = truncate# [Word8#] [Nat#] runs
        write# addr 7# runs8

        -- Write the function pointer.
        write# addr 8# fun

        sane    = mul#  (lt# params 16#)
                        (lt# boxes  8#)

        case sane of
         False#
          -> do primFailString "! Dodgy Thunk Allocation\n"#
                fail#

         True#  -> makePtr# addr




-- | Determine the total size of a thunk.
ddcSizeOfThunk [r : Region] (obj : Ptr# r Obj) : Nat#
 =      ddcSizeOfThunk_args (ddcArgsThunk obj)


-- | Determine the total size of a thunk, given the number of arguments it has.
ddcSizeOfThunk_args (args : Nat#) : Nat#
 = do
        -- The payload needs to be big enough to store pointers to the
        -- current available args.
        bytesPayload    = shl# args (size2# [Addr#])

        bytesObj        = add# (size# [Word32#])        -- tagFormat word.
                         (add# (size# [Word32#])        -- params/boxes/args/runs.
                         (add# (size# [Word64#])        -- function pointer.
                                bytesPayload))          -- function args.

        bytesObj


-- | Copy the available arguments from one thunk to another.
ddcCopyThunk
        [rSrc rDst: Region]
        (src: Ptr# rSrc Obj) (dst: Ptr# rDst Obj)
        (index: Nat#)        (len: Nat#)
        : Ptr# rDst Obj
 = case ge# index len of
        True#   -> dst
        False#
         -> do  ptr     = ddcGetThunk [rSrc] [rSrc] src index
                ddcSetThunk dst 0#  index ptr
                ddcCopyThunk src dst (add# index 1#) len


-- | Copy a thunk while extending the number of available argument slots.
--   This is used when implementing both the curryN# and applyN# core primops.
ddcExtendThunk
        [rSrc rDst: Region]
        (pSrc: Ptr# rSrc Obj) (more: Nat#)
        : Ptr# rDst Obj
 = do
        sSrc    = allocSlot# [rSrc]

        -- Function pointer and arity of that function.
        fun     = ddcFunThunk    pSrc
        params  = ddcParamsThunk pSrc
        boxes   = ddcBoxesThunk  pSrc

        -- Available arguments in source and destination.
        args    = ddcArgsThunk   pSrc
        args'   = add# args      more

        -- Number of times the thunk has been run
        runs    = ddcRunsThunk   pSrc

        -- Function pointer.
        aFun    = ddcFunThunk pSrc

        -- Allocate a new thunk with the orignal function and arity,
        --  holding the source pointer in a slot over the allocation.
        poke# sSrc pSrc
        pDst    = ddcAllocThunk [rDst] aFun params boxes args' runs
        pSrc'   = peek# sSrc

        -- Copy argument pointers from the source into the new thunk.
        ddcCopyThunk pSrc' pDst 0# args


-- | Get the function pointer from a thunk.
ddcFunThunk        [r: Region] (obj: Ptr# r Obj): Addr#
 =      read#    [Addr#] (takePtr# obj) 8#


-- | Get the arity of the function in a thunk.
ddcParamsThunk     [r: Region] (obj: Ptr# r Obj): Nat#
 =      promote# (read# [Word8#] (takePtr# obj) 4#)


-- | Get the count of available arguments in a thunk.
ddcBoxesThunk      [r: Region] (obj: Ptr# r Obj): Nat#
 =      promote# (read# [Word8#] (takePtr# obj) 5#)


-- | Get the count of available arguments in a thunk.
ddcArgsThunk       [r: Region] (obj: Ptr# r Obj): Nat#
 =      promote# (read# [Word8#] (takePtr# obj) 6#)


-- | Get the count of available arguments in a thunk.
ddcRunsThunk       [r: Region] (obj: Ptr# r Obj): Nat#
 =      promote# (read# [Word8#] (takePtr# obj) 7#)


-- | Set one of the pointers in a thunk.
--   The value is just a plain Addr# because we don't know what region the
--   original pointer in the Thunk was pointing to. Also, when setting these
--   pointers for the first time the pointer values in the thunk are undefined.
--   This takes a 'base' and 'offset' parameter separately to allow for easier
--   code generation.
ddcSetThunk
        [r1 r2: Region]
        (obj: Ptr# r1 Obj) (base: Nat#) (offset: Nat#) (val: Ptr# r2 Obj): Void#
 =      write# (takePtr# obj)
               (add# 16# (shl# (add# base offset) (size2# [Addr#])))
               (takePtr# val)


-- | Get one of the arguments from a thunk.
ddcGetThunk
        [r1 r2: Region]
        (obj:   Ptr# r1 Obj) (index: Nat#): Ptr# r2 Obj
 =      read#  (takePtr# obj)
               (add# 16# (shl# index (size2# [Addr#])))


-- Boxed ----------------------------------------------------------------------
-- | Allocate a Boxed Data Object.
--   The payload contains pointers to other heap objects.
--
--   The arity must be no greater than 2^32, else undefined.
--   This object type is typically used for algebraic data, which won't have
--   more than 2^32 fields.
--
--   typedef struct
--   {    uint32_t  tagFormat;    // Constructor tag and format field.
--        uint32_t  arity;        // Arity of the data constructor.
--                                //  (The number of pointers in the payload)
--        ObjData   payload[];
--   } DataBoxed;
--
ddcAllocBoxed
        [r: Region]
        (tag: Tag#) (arity: Nat#): Ptr# r Obj
 = do
        -- Multiple arity by 8 bytes-per-pointer to get size of payload.
        bytesObj        = ddcSizeOfBoxed_arity arity

        case check# bytesObj of
         True#  -> ()
         False# -> ddcAllocCollect bytesObj

        ddcAllocBoxed_ok tag arity bytesObj

ddcAllocBoxed_ok
        [r: Region]
        (tag: Tag#) (arity: Nat#) (bytesObj: Nat#): Ptr# r Obj
 = do
        -- Alloc and zero whole object because the Salt code generator
        -- does not guarantee that no more allocations will be performed
        -- before the argument pointers have been written.
        addr            = alloc# bytesObj
        set# addr 0w8# bytesObj

        tag32           = promote# [Word32#] [Tag#] tag
        format          = 0b00100001w32#
        header          = bor# (shl# tag32 8w32#) format
        write# addr 0# header

        -- Truncate arity to 32-bits.
        arity32         = truncate# [Word32#] [Nat#] arity
        write# addr 4# arity32

        makePtr# addr


-- | Determine the total size of a boxed data object.
ddcSizeOfBoxed [r : Region] (obj : Ptr# r Obj) : Nat#
 =      ddcSizeOfBoxed_arity (ddcArityOfBoxed obj)


-- | Determine the total size of a boxed data object, given the number of
--   pointers in its payload.
ddcSizeOfBoxed_arity (arity : Nat#) : Nat#
 = do
        -- Multiple arity by 8 bytes-per-pointer to get size of payload.
        bytesPayload    = shl# arity (size2# [Addr#])
        bytesObj        = add# (size# [Word32#])
                         (add# (size# [Word32#]) bytesPayload)

        bytesObj


-- | Get one of the pointers from a boxed data object.
ddcGetBoxed
        [r1 r2: Region]
        (obj: Ptr# r1 Obj) (index: Nat#)
        : Ptr# r2 Obj
 =      read#  (takePtr# obj)
               (add# 8# (shl# index (size2# [Addr#])))


-- | Set one of the pointers from a boxed data object.
ddcSetBoxed
        [r1 r2: Region]
        (obj: Ptr# r1 Obj) (index: Nat#) (val: Ptr# r2 Obj): Void#
 =      write# (takePtr# obj)
               (add# 8# (shl# index (size2# [Addr#])))
               val


-- | Get the number of pointers in a boxed data object's payload.
ddcArityOfBoxed [r : Region] (obj : Ptr# r Obj) : Nat#
 =      promote# (read# [Word32#] (takePtr# obj) 4#)


-- Mixed ----------------------------------------------------------------------
-- | Allocate a Mixed Data Object.
--   The payload contains some pointers followed by raw data.
--
--   The arity (ptrCount) must be no greater than 2^32, else undefined.
--   The payload can have length up to 2^64.
--
--   typedef struct
--   { uint32_t  tagFormat;
--     uint32_t  ptrCount;  // Number of pointers at the start of the payload.
--     uint64_t  size;      // Size of the whole object, in bytes.
--     ObjData   payload[]; // Contains ptrCount pointers, then raw data.
--   } DataMixed;
--
ddcAllocMixed
        [r: Region]
        (tag: Tag#) (arity: Nat#) (bytesRaw: Nat#)
        : Ptr# r Obj
 = do
        bytesPtrs       = shl# arity 3#
        bytesObj        = add# (size# [Word32#])
                         (add# (size# [Word32#])
                         (add# (size# [Word64#])
                         (add# bytesPtrs bytesRaw)))

        case check# bytesObj of
         True#  -> ()
         False# -> ddcAllocCollect bytesObj

        ddcAllocMixed_ok [r] tag arity bytesObj


ddcAllocMixed_ok
        [r: Region]
        (tag: Tag#) (arity: Nat#) (bytesObj: Nat#)
        : Ptr# r Obj
 = do
        -- Alloc and zero whole object because the Salt code generator
        -- does not guarantee that no more allocations will be performed
        -- before the argument pointers have been written.
        addr            = alloc# bytesObj
        set# addr 0w8# bytesObj

        tag32           = promote# tag
        format          = 0b01000001w32#
        header          = bor# (shl# tag32 8w32#) format
        write# addr 0# header

        arity32         = truncate# [Word32#] [Nat#] arity
        write# addr 4# arity32

        bytesObj32      = promote#  [Word64#] [Nat#] bytesObj
        write# addr 8# bytesObj32

        makePtr# addr


-- | Determine the total size of a mixed data object.
ddcSizeOfMixed [r : Region] (obj : Ptr# r Obj) : Nat#
 = do   promote# (read# [Word64#] (takePtr# obj) 8#)


-- | Get one of the pointers from a mixed data object.
ddcGetMixed [r1 r2: Region] (obj: Ptr# r1 Obj) (index: Nat#): Ptr# r2 Obj
 =      read#   (takePtr# obj)
                (add# 16# (shl# index (size2# [Addr#])))


-- | Get the number of pointers in a mixed data object's payload.
ddcArityOfMixed [r : Region] (obj : Ptr# r Obj) : Nat#
 =      promote# (read# [Word32#] (takePtr# obj) 4#)


-- | Get the address of the raw data payload from a mixed object.
ddcPayloadMixed [r: Region] (obj: Ptr# r Obj): Ptr# r Word8#
 =      plusPtr# (castPtr# obj) 16#


-- Raw ------------------------------------------------------------------------
-- | A Raw Data Object.
--   A raw data object does not contain heap pointers that need to be traced
--   by the garbage collector.
--
--   The payload size must be no greater than (2^32 - 8), else undefined.
--
--   typedef struct
--   { uint32_t  tagFormat;  // Constructor tag and format field.
--     uint32_t  size;       // Size of the whole object, in bytes.
--     uint8_t   payload[];  // Raw data that does not contain heap pointers.
--   } DataRaw;
--
ddcAllocRaw
        [r: Region] (tag: Tag#) (bytesPayload: Nat#): Ptr# r Obj
 = do
        -- The overall size of the object.
        bytesReq        = add# (size# [Word32#])
                         (add# (size# [Word32#]) bytesPayload)

        bytesTail       = promote# [Nat#] (band# (truncate# bytesReq) 0b11w32#)

        bytesObj        = case eq# bytesTail 0# of
                                True#   -> bytesReq
                                False#  -> add# bytesReq (sub# 4# bytesTail)

        -- Check that there's enough space on the heap,
        -- and perform a collection if needed.
        case check# bytesObj of
         True#  -> ()
         False# -> ddcAllocCollect bytesObj

        -- We're good to allocate the object.
        ddcAllocRaw_ok tag bytesObj

ddcAllocRaw_ok
        [r: Region] (tag: Tag#) (bytesObj: Nat#): Ptr# r Obj
 = do
        addr            = alloc# bytesObj
        set# addr 0w8# bytesObj

        tag32           = promote# tag
        format          = 0b00110001w32#
        header          = bor# (shl# tag32 8w32#) format
        write# addr 0# header

        bytesObj32      = truncate# [Word32#] [Nat#] bytesObj
        write# addr 4# bytesObj32

        makePtr# addr


-- | Determine the total size of a raw data object.
ddcSizeOfRaw [r : Region] (obj : Ptr# r Obj) : Nat#
 =      promote# (read# [Word32#] (takePtr# obj) 4#)


-- | Get the payload data from a raw object.
ddcPayloadRaw [r: Region] (obj: Ptr# r Obj): Ptr# r Word8#
 =      plusPtr# (castPtr# obj) 8#


-- | Get the size of the payload of a raw object, in bytes.
ddcPayloadSizeRaw [r: Region] (obj: Ptr# r Obj): Nat#
 =      sub#    (promote# (read# [Word32#] (takePtr# obj) 4#))
                8#


-- Small ----------------------------------------------------------------------
-- | A Small object, which an only hold raw, non-pointer data.
--   The object size is encoded as part of format field
--   This saves us from needing to include a separate arity field.
--
--   The payload size must be no greater than 16 words, else undefined.
--
--   typedef struct
--   { uint32_t  tagFormat;  // Constructor tag and format field.
--     uint8_t   payload[];  // Raw data that does not contain heap pointers.
--   } DataRawSmall;
--
ddcAllocSmall
        [r: Region]
        (tag: Tag#) (bytesPayload: Nat#): Ptr# r Obj
 = do
        bytesObj        = add# 4# bytesPayload

        -- ISSUE #402: Check that object allocs do not misalign the heap.
        --   The total object must be at least 8 bytes long and 4-byte aligned.
        --   The current compiler shouldn't try to allocate such an object,
        --   but do the check anyway.
        case check# bytesObj of
         True#   -> ()
         False#  -> ddcAllocCollect bytesObj

        ddcAllocSmall_ok tag bytesPayload bytesObj


ddcAllocSmall_ok
        [r: Region]
        (tag: Tag#) (bytesPayload: Nat#) (bytesObj: Nat#): Ptr# r Obj
 = do
        addr            = alloc# bytesObj

        tag32           = promote#  tag
        bytesPayload32  = truncate# bytesPayload
        wordsPayload32  = shr#  bytesPayload32 2w32#
        format          = 0b0011w32#
        header          =  bor# (shl# tag32          8w32#)
                          (bor# (shl# wordsPayload32 4w32#) format)
        write# addr 0# header

        makePtr# addr


ddcSizeOfSmall [r: Region] (obj: Ptr# r Obj): Nat#
 = do   add# 4# (ddcPayloadSizeSmall obj)


-- | Get a pointer to the payload data from a raw small object.
ddcPayloadSmall [r: Region] (obj: Ptr# r Obj): Ptr# r Word8#
 =      plusPtr# (castPtr# obj) 4#


-- | Determine the size of a raw small object.
ddcPayloadSizeSmall [r: Region] (obj: Ptr# r Obj): Nat#
 = do
        wordsPayload    = ddcArgOfObject obj
        bytesPayload    = shl# wordsPayload 2#
        bytesPayload


-- Failure --------------------------------------------------------------------
-- | Report a bogus object and abort the program.
ddcFailObj [r: Region]
           (obj: Ptr# r Obj) (fn: TextLit#) (msg: TextLit#): Unit
 = do
        primFailString "ddc-runtime."#
        primFailString fn
        primFailString " "#
        primFailString msg
        primFailString "\n"#
        primFailString "\n"#
        fail#


