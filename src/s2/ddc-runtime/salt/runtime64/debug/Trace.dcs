
-- | Dumping of the runtime object graph.
module Trace

export value

 ddcTraceAlloc
        :  Bool# -> Addr#
        -> Addr# -> Addr# -> Addr#
        -> Addr# -> Addr# -> Addr#
        -> Unit

 ddcTraceObj            : [r : Region]. Bool# -> Bool# -> Ptr# r Obj -> Ptr# r Obj
 ddcTraceRoots          : Bool# -> Unit
 ddcTraceHeap           : Bool# -> Unit

import value
 -- Primitives imported from C-land.
 primStdoutPutString    : TextLit# -> Void#
 primFailString         : TextLit# -> Void#

 -- Object checking functions.
 ddcCheckObjHeader      : [r: Region]. Ptr# r Obj -> Word32#
 ddcCheckObjExtent      : [r: Region]. Ptr# r Obj -> Nat# -> Unit

 -- Broken Hearts
 ddcReadBrokenHeart     : [r1 r2: Region]. Ptr# r1 Obj -> Ptr# r2 Obj

 -- Generic objects.
 ddcTagOfObject         : [r: Region]. Ptr# r Obj -> Tag#
 ddcFormatOfObject      : [r: Region]. Ptr# r Obj -> Nat#
 ddcFormatFieldOfObject : [r: Region]. Ptr# r Obj -> Word8#
 ddcSizeOfObject        : [r: Region]. Ptr# r Obj -> Nat#
 ddcHeaderSizeOfObject  : [r: Region]. Ptr# r Obj -> Nat#
 ddcGetTag              : [r: Region]. Ptr# r Obj -> Tag#

 -- Thunk objects.
 ddcParamsThunk         : [r: Region]. Ptr# r Obj -> Nat#
 ddcBoxesThunk          : [r: Region]. Ptr# r Obj -> Nat#
 ddcArgsThunk           : [r: Region]. Ptr# r Obj -> Nat#
 ddcRunsThunk           : [r: Region]. Ptr# r Obj -> Nat#
 ddcFunThunk            : [r: Region]. Ptr# r Obj -> Addr#
 ddcGetThunk            : [r1 r2 : Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj

 -- Boxed objects.
 ddcAllocBoxed          : [r1    : Region]. Tag# -> Nat# -> Ptr# r1 Obj
 ddcArityOfBoxed        : [r1    : Region]. Ptr# r1 Obj  -> Nat#
 ddcGetBoxed            : [r1 r2 : Region]. Ptr# r1 Obj  -> Nat# -> Ptr# r2 Obj
 ddcSetBoxed            : [r1 r2 : Region]. Ptr# r1 Obj  -> Nat# -> Ptr# r2 Obj -> Void#

 -- Raw Objects.
 ddcPayloadSizeRaw      : [r1:    Region]. Ptr# r1 Obj  -> Nat#

 -- GC Interface.
 ddcLlvmRootGetStart    : Nat#  -> Addr#
 ddcLlvmRootIsEnd       : Addr# -> Bool#


import foreign abstract type
 Top : Region

with letrec


-- | Trace state of the allocator.
--   Print out the addresses of the current heap and slot stack.
ddcTraceAlloc
        (print                           : Bool#)
        (pRootStart                      : Addr#)
        (ppHeapBase ppHeapTop ppHeapMax  : Addr#)
        (ppBackBase ppBackTop ppBackMax  : Addr#) : Unit
 = do
        (case print of
         False# -> ()
         True#
          -> do primStdoutPutString "* ddc-runtime.ddcTraceAlloc\n"#
                ddcPrintAddr  "  pHeapBase      = "#  (read# ppHeapBase 0#)
                ddcPrintAddr  "  pHeapTop       = "#  (read# ppHeapTop  0#)
                ddcPrintAddr  "  pHeapMax       = "#  (read# ppHeapMax  0#)
                ddcPrintAddr  "  pBackBase      = "#  (read# ppBackBase 0#)
                ddcPrintAddr  "  pBackTop       = "#  (read# ppBackTop  0#)
                ddcPrintAddr  "  pBackMax       = "#  (read# ppBackMax  0#)
                ())

        ddcTraceRoots print

        (case print of
         False# -> ()
         True#
          -> do primStdoutPutString "\n"#
                ())

        ()

ddcPrintAddr (name: TextLit#) (addr: Addr#): Void#
 = do   primStdoutPutString name
        primStdoutPutString "FIXME"# -- (primShowAddr addr)
        primStdoutPutString "\n"#


---------------------------------------------------------------------------------------------------
-- | Trace the object graph starting from this objet.
ddcTraceObj
        [r: Region]
        (recurse: Bool#)        -- ^ Recursively trace reachable objects.
        (print:   Bool#)        -- ^ Print out a description of each object as we go.
        (obj: Ptr# r Obj)
        : Ptr# r Obj
 = do
        -- Check that the header is in range before we read the
        -- format field from it.
        ddcCheckObjHeader obj

        format = ddcFormatOfObject obj
        (case format of
          1#    -> traceForward recurse print obj
          2#    -> traceThunk   recurse print obj
          3#    -> traceBoxed   recurse print obj
          4#    -> traceRaw     print obj
          6#    -> traceSmall   print obj

          _     -> do
                 primFailString "ddc-runtime.ddcTraceObj: Unrecognized object format.\n"#
                 primFailString  "FIXME"# -- (primShowNat format)
                 primFailString "\n"#
                 fail#)
        obj

---------------------------------------------------------------------------------------------------
-- | Trace a forwarding pointer, and optionally print it to stdout.
traceForward
        [r: Region]
        (recurse print: Bool#) (obj: Ptr# r Obj): Ptr# r Obj
 = do
        (case print of
          False# -> ()
          True#  -> do
                pTarget = ddcReadBrokenHeart [r] [r] obj

                primStdoutPutString "Forward\n"#
                fieldAddr     "{   ptr            = "# (takePtr# obj)
                fieldAddr     "    target         = "# (takePtr# pTarget)
                primStdoutPutString "}\n"#
                ())
        obj

---------------------------------------------------------------------------------------------------
-- | Trace a thunk object, and optionally print it to stdout.
--
--   The tag/format word must have already been checked to be inside the heap.
--
traceThunk
        [r: Region]
        (recurse print: Bool#) (obj: Ptr# r Obj): Ptr# r Obj
 = do
        -- We've only checked that tag/format word is within the heap so far,
        -- so can only safely print out that much.
        (case print of
          False# -> ()
          True#  -> do
                primStdoutPutString "Thunk\n"#
                fieldAddr     "{   ptr            = "# (takePtr# obj)
                fieldWord32   "    header         = "# (read# (takePtr# obj) 0#)
                fieldWord32   "    tag            = "# (promote# (ddcTagOfObject obj))
                fieldWord32   "    format         = "# (promote# (ddcFormatFieldOfObject obj))
                ())

        -- Check that the rest of the header is also within the heap,
        -- which will also read the tag/format field.
        ddcCheckObjExtent obj (ddcHeaderSizeOfObject obj)

        -- Check that the payload is also within the heap,
        -- which will also read the rest of the header.
        ddcCheckObjExtent obj (ddcSizeOfObject obj)

        -- Now it's safe to print the rest of the object.
        (case print of
          False# -> ()
          True#  -> do
                fieldNat      "    params         = "# (ddcParamsThunk obj)
                fieldNat      "    boxes          = "# (ddcBoxesThunk  obj)
                fieldNat      "    args           = "# (ddcArgsThunk   obj)
                fieldNat      "    runs           = "# (ddcRunsThunk   obj)
                fieldAddr     "    fun            = "# (ddcFunThunk    obj)
                fieldNat      "    (object size)  = "# (ddcSizeOfObject obj)
                traceThunkPtrs recurse print obj 0#
                primStdoutPutString "}\n"#
                ())

        case recurse of
         True#
          -> do traceThunkPtrss recurse print obj 0#
                obj

         False#
          ->    obj


-- | Print pointers in a thunk object, which point to more objects.
traceThunkPtrs
        [r: Region]
        (recurse print: Bool#)
        (obj: Ptr# r Obj) (i: Nat#): Unit
 = case eq# (ddcArgsThunk obj) i of
        True#  -> ()
        False#
         -> do  addr    = takePtr# [r] (ddcGetThunk [r] obj i)

                (case print of
                  False# -> ()
                  True#  -> do
                        primStdoutPutString "    arg "#
                        primStdoutPutString "FIXME"# -- (primShowNat i)
                        primStdoutPutString "          = "#
                        primStdoutPutString "FIXME"# -- (primShowAddr addr)
                        primStdoutPutString ";\n"#
                        ())

                traceThunkPtrs recurse print obj (add# i 1#)


-- | Trace out the objects that this one refers to.
traceThunkPtrss
        [r: Region]
        (recurse print: Bool#)
        (obj: Ptr# r Obj) (i: Nat#): Unit
 = case eq# (ddcArgsThunk obj) i of
         True# -> ()
         False#
          -> do ddcTraceObj [r] True# print (ddcGetThunk [r] obj i)
                traceThunkPtrss recurse print obj (add# i 1#)


---------------------------------------------------------------------------------------------------
-- | Print a Boxed object to stdout.
traceBoxed
        [r: Region]
        (recurse print: Bool#)
        (obj: Ptr# r Obj): Ptr# r Obj
 = do
        -- We've only checked that tag/format word is within the heap so far,
        -- so can only safely print out that much.
        (case print of
          False# -> ()
          True#  -> do
                primStdoutPutString "Boxed\n"#
                fieldAddr     "{   ptr            = "# (takePtr# obj)
                fieldWord32   "    header         = "# (read# (takePtr# obj) 0#)
                fieldWord32   "    format         = "# (promote# (ddcFormatFieldOfObject obj))
                fieldWord32   "    tag            = "# (promote# (ddcTagOfObject obj))
                ())

        -- Check that the rest of the header is also within the heap,
        -- which will also read the tag/format field.
        ddcCheckObjExtent obj (ddcHeaderSizeOfObject obj)

        -- Now it's safe to get the arity.
        arity   = ddcArityOfBoxed obj
        size    = ddcSizeOfObject obj
        (case print of
          False# -> ()
          True#  -> do
                fieldNat      "    arity          = "# arity
                fieldNat      "    (object size)  = "# size
                ())

        -- Check that the payload is also within the heap,
        -- which will also read the rest of the header.
        ddcCheckObjExtent obj (ddcSizeOfObject obj)

        -- Now it's safe to print the rest of the object.
        (case print of
          False# -> ()
          True#  -> do
                traceBoxedPtrs print obj (promote# arity) 0#
                primStdoutPutString "}\n"#
                ())

        case recurse of
         True#
          -> do traceBoxedPtrss recurse print obj (promote# arity) 0#
                obj

         False#
          -> obj


-- | Print pointers in a boxed object, which point to more objects.
traceBoxedPtrs
        [r: Region]
        (print: Bool#)
        (obj: Ptr# r Obj) (n: Nat#) (i: Nat#): Unit
 = case eq# n i of
         True#
          ->    ()

         False#
          -> do addr     = takePtr# [r] (ddcGetBoxed [r] obj i)
                (case print of
                  False# -> ()
                  True#  -> do
                        primStdoutPutString "    arg "#
                        primStdoutPutString "FIXME"# -- (primShowNat i)
                        primStdoutPutString "          = "#
                        primStdoutPutString "FIXME"# -- (primShowAddr addr)
                        primStdoutPutString ";\n"#
                        traceBoxedPtrs print obj n (add# i 1#))


-- | Trace out the objects that this one refers to.
traceBoxedPtrss
        [r: Region]
        (recurse print: Bool#)
        (obj: Ptr# r Obj) (n: Nat#) (i: Nat#): Unit
 = case eq# n i of
         True#
          -> ()

         False#
          -> do ddcTraceObj [r] recurse print (ddcGetBoxed [r] obj i)
                traceBoxedPtrss recurse print obj n (add# i 1#)


---------------------------------------------------------------------------------------------------
-- | Print a Raw object to stdout.
traceRaw [r: Region]
         (print: Bool#) (obj: Ptr# r Obj): Ptr# r Obj
 = do
        -- We've only checked that tag/format word is within the heap so far,
        -- so can only safely print out that much.
        (case print of
          False#  -> ()
          True#   -> do
                primStdoutPutString "Raw\n"#
                fieldAddr     "{   ptr            = "# (takePtr#  obj)
                fieldWord32   "    header         = "# (read# (takePtr# obj) 0#)
                fieldWord32   "    format         = "# (promote#  (ddcFormatFieldOfObject obj))
                fieldWord32   "    tag            = "# (promote#  (ddcTagOfObject obj))
                ())

        -- Check that the rest of the header is also within the heap,
        -- which will also read the tag/format field.
        ddcCheckObjExtent obj (ddcHeaderSizeOfObject obj)

        -- Check that the payload is also within the heap,
        -- which will also read the rest of the header.
        ddcCheckObjExtent obj (ddcSizeOfObject obj)

        -- Now it's safe to print the rest of the object.
        (case print of
          False#  -> ()
          True#   -> do
                fieldWord32   "    payload size   = "# (truncate# (ddcPayloadSizeRaw obj))
                fieldNat      "    (object size)  = "# (ddcSizeOfObject obj)
                primStdoutPutString "}\n"#
                ())

        obj

---------------------------------------------------------------------------------------------------
-- | Print a Small object to stdout.
traceSmall [r: Region] (print: Bool#) (obj: Ptr# r Obj): Ptr# r Obj
 = do
        -- The header of a small object consists only of the tag/format field,
        -- so we don't need to do any extra checking before printing it.
        (case print of
          False#  -> ()
          True#   -> do
                primStdoutPutString "Small\n"#
                fieldAddr     "{   ptr            = "# (takePtr# obj)
                fieldWord32   "    header         = "# (read# (takePtr# obj) 0#)
                fieldWord32   "    format         = "# (promote# (ddcFormatFieldOfObject obj))
                fieldNat      "    (object size)  = "# (ddcSizeOfObject obj)
                primStdoutPutString "}\n"#
                ())
        obj


---------------------------------------------------------------------------------------------------
-- | Trace the objects directly reachable from the GC slot stack,
--   checking that they're well formed.
--
--   Also print the slot stack and the objects if requested.
--
-- @brief The map for a single function's stack frame.  One of these is
--        compiled as constant data into the executable for each function.
--
-- Storage of metadata values is elided if the %metadata parameter to
-- @llvm.gcroot is null.
--
-- struct FrameMap {
--   uint32_t NumRoots;    //< Number of roots in stack frame.
--   uint32_t NumMeta;     //< Number of metadata entries.  May be < NumRoots.
--   const void *Meta[]; //< Metadata for each root.
-- };
--
--  @brief A link in the dynamic shadow stack.  One of these is embedded in
--         the stack frame of each function on the call stack.
-- struct StackEntry {
--   StackEntry *Next;    //< Link to next stack entry (the caller's).
--   const FrameMap *Map; //< Pointer to constant FrameMap.
--   void *Roots[];      //< Stack roots (in-place array).
-- };

-- @brief The head of the singly-linked list of StackEntries.  Functions push
--        and pop onto this in their prologue and epilogue.
--
-- Since there is only a global list, this technique is not threadsafe.
--
-- StackEntry *llvm_gc_root_chain;
--

ddcTraceRoots (print: Bool#): Unit
 = do
        pRootChainA     = ddcLlvmRootGetStart 0#

        (case print of
          False# -> ()
          True#  -> do
                ddcTraceRootStackEntry pRootChainA)
        ()

ddcTraceRootStackEntry (aEntry: Addr#): Unit
 = do
        -- Address of next entry in the chain.
        aEntryNext      = read#     aEntry       0#

        -- Address of frame that hold the number of roots, and meta-data.
        aEntryFrame     = read#     aEntry            (size# [Addr#])

        -- Address of array of roots for this frame.
        aEntryRoots     = plusAddr# aEntry      (add# (size# [Addr#]) (size# [Addr#]))

        -- Number of roots without meta-data in the frame.
        numRoots        = read#     aEntryFrame  0#

        -- Number of roots with meta-data in the frame.
        numMeta         = read#     aEntryFrame (size# [Word32#])

        -- Print the current stack entry.
        primStdoutPutString "Entry\n"#
        fieldAddr     "{ pEntry      = "# aEntry
        fieldAddr     "  pEntryNext  = "# aEntryNext
        fieldAddr     "  pEntryFrame = "# aEntryFrame
        fieldAddr     "  pEntryRoots = "# aEntryRoots
        fieldWord32   "  numRoots    = "# numRoots
        fieldWord32   "  numMeta     = "# numMeta

        -- Print the roots in the frame for this entry.
        ddcTraceRootFrame aEntryRoots 0# (promote# numRoots)

        primStdoutPutString "}\n"#

        -- If we have not reached the end of the chain then keep printing frames.
        case ddcLlvmRootIsEnd aEntryNext of
         True#  -> ()
         False# -> ddcTraceRootStackEntry aEntryNext


-- Print all the roots in the given frame.
ddcTraceRootFrame
        (addr: Addr#)   -- Current address in frame.
        (ix: Nat#)      -- Number of roots printed so far.
        (n: Nat#)       -- Total number of roots to print.
        : Unit
 = case sub# n ix of
    0#  -> ()
    _   -> do
        fieldAddr     "  root        = "# (read# addr 0#)

        ddcTraceRootFrame
                (plusAddr# addr (size# [Addr#]))
                (add# ix 1#)
                n


---------------------------------------------------------------------------------------------------
-- | Trace all objects in the heap, checking that the are well format.
--
--   Also print out a descripton of each object if requested.
--
ddcTraceHeap (print: Bool#): Unit
 = do
        pHeapBaseA      = read# (global# [Addr#] "ddcHeapBase"#) 0#
        pHeapTopA       = read# (global# [Addr#] "ddcHeapTop"#)  0#
        pHeapMaxA       = read# (global# [Addr#] "ddcHeapMax"#)  0#

        (case print of
          False# -> ()
          True#  -> do
                primStdoutPutString "Heap\n"#
                fieldAddr     "{   heapBase = "#  pHeapBaseA
                fieldAddr     "    heapTop  = "#  pHeapTopA
                fieldAddr     "    heapMax  = "#  pHeapMaxA
                primStdoutPutString "}\n"#
                ())

        pObj    = makePtr# [Top] pHeapBaseA
        traceHeap print pObj pHeapTopA
        ()

traceHeap
        [r: Region]
        (print:    Bool#)
        (pObj:     Ptr# r Obj)
        (aHeapTop: Addr#)
        : Unit

 = case ge# (takePtr# pObj) aHeapTop of
    True#  -> ()
    False# -> do
        -- Print the current object.
        -- Doing this also checks that it is well formed.
        ddcTraceObj False# print pObj

        -- Advance to the next object.
        -- The current object must have a non-zero size otherwise we'll loop forever.
        size    = ddcSizeOfObject pObj

        case eq# size 0# of
         True# -> do
                primFailString "ddc-runtime.traceHeap: object has zero size\n."#
                fail#

         False# -> do
                pNext   = plusPtr# pObj size
                traceHeap print pNext aHeapTop


---------------------------------------------------------------------------------------------------
-- | Print an Addr# field to stdout.
fieldAddr (name: TextLit#) (val: Addr#): Void#
 = do   primStdoutPutString name
        primStdoutPutString "FIXME"# -- (primShowAddr val)
        primStdoutPutString ";\n"#


-- | Print a Nat# field to stdout.
fieldNat (name: TextLit#) (val: Nat#): Void#
 = do   primStdoutPutString name
        primStdoutPutString "FIXME"# -- (primShowNat val)
        primStdoutPutString ";\n"#


-- | Print a Word32# field to stdout.
fieldWord32 (name: TextLit#) (val: Word32#): Void#
 = do   primStdoutPutString name
        primStdoutPutString "FIXME"# -- (primShowWord32 val)
        primStdoutPutString ";\n"#

