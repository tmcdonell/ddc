
module Class.Category
export  { id; compose; composeLeft; composeRight }
where


-------------------------------------------------------------------------------
-- | The class of categories.
data Category (cat: Data -> Data -> Data) where
        Category
         :  ({@a: Data} -> cat a a)
         -> ({@a b c: Data} -> cat b c -> cat a b -> cat a c)
         -> Category cat


-- | Identity morphism.
id      {@cat: Data -> Data -> Data} {@a: Data}
        {(Category id' _): Category cat}
        : cat a a
        = id'


-- | Compose two morphisms.
--   The operator '∘' is desugared onto this function.
compose {@cat: Data -> Data -> Data} {@a b c: Data}
        {(Category _ compose'): Category cat}
        : cat b c -> cat a b -> cat a c
 = compose'


-- TODO: Should not need to supply implicit arg.
composeLeft
        {@cat: Data -> Data -> Data} {@a b c: Data} {xc: Category cat}
        : cat b c -> cat a b -> cat a c
        = compose {xc}

composeRight
        {@cat: Data -> Data -> Data} {@a b c: Data} {xc: Category cat}
        : cat a b -> cat b c -> cat a c
        = λxab -> λxbc -> compose xbc xab

