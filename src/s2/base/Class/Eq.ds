
module Class.Eq
export
{       eq; neq;
        eq_Bool;
        eq_Tup2;
}
import Data.Numeric.Bool
import Data.Tuple
where


-------------------------------------------------------------------------------
-- | Dictionary for equality test.
--
--   We keep separate equality and not-equality functions as sometimes
--   for not-equality directly can be faster than testing for equality
--   and then negating the answer, and vis-versa.
--
data Eq (a: Data) where
        Eq      :  (a -> a -> Bool)     -- ^ eq  function.
                -> (a -> a -> Bool)     -- ^ neq function.
                -> Eq a


-- | Check whether two values are equal.
eq  {(Eq eq' _):  Eq a} (x1 x2: a): Bool
 = eq'  x1 x2


-- | Check whether two values are not equal.
neq {(Eq _ neq'): Eq a} (x1 x2: a): Bool
 = neq' x1 x2


-------------------------------------------------------------------------------
-- Dictionaries for primitive types.

-- | Eq dictionary for Bool.
eq_Bool: Eq Bool
 = Eq eq' neq'
 where  eq'  True  x     = x
        eq'  False True  = False
        eq'  False _     = True

        neq' True  True  = False
        neq' True  False = True
        neq' False x     = x


eq_Tup2 {@a b: Data} {Eq a} {Eq b}: Eq (Tup2 a b)
 = Eq eq' neq'
 where
        eq' (T2 a1 b1) (T2 a2 b2)
         = and (eq a1 a2)  (eq  b1 b2)

        neq' (T2 a1 b1) (T2 a2 b2)
         = or  (neq a1 a2) (neq b1 b2)

