
module Class.Show
export
{       show;
        show_Unit;
        show_Bool;
        show_Nat;
        show_Float32;   show_Float64;
        show_Char;      show_Text;
        show_Tup2;
        show_Maybe;
        show_Either;
        show_List;
}
import Data.Text
import Data.Maybe
import Data.Either
import Data.List
where


-------------------------------------------------------------------------------
-- | Class dictionary for Show.
data Show (a: Data) where
        Show    : (a -> Text) -> Show a

show {(Show sh): Show a} (x: a): Text
 = sh x


-------------------------------------------------------------------------------
-- Dictionaries for primitive types.

-- | Show dictionary for Unit.
show_Unit: Show Unit
 = Show   $ Î»xx -> "()"

-- | Show dictionary for Bool.
show_Bool: Show Bool
  = Show showBool


-- | Show dictionary for Nat.
show_Nat: Show Nat
 = Show showNat


-- | Show dictionary for Float32.
show_Float32: Show Float32
 = Show showFloat32


-- | Show dictinoary for Float64.
show_Float64: Show Float64
 = Show showFloat64


-- | Show dictionary for Char.
show_Char: Show Char
 = Show textOfChar


-- | Show dictionary for Text.
--   ISSUE #381: Escape non-printable characters in base Show library.
show_Text: Show Text
 = Show sh
 where  sh tx           = "\"" % tx % "\""


-- | Show dictionary for Tup2.
show_Tup2 {Show a} {Show b}: Show (Tup2 a b)
 = Show sh
 where
        sh (T2 x y)     = parens $ "T2" %% show x %% show y


-- | Show dictionary for Maybe.
show_Maybe {Show a}: Show (Maybe a)
 = Show sh
 where
        sh Nothing      = "Nothing"
        sh (Just x)     = parens $ "Just" %% show x


-- | Show dictionary for Either.
show_Either {Show a} {Show b}: Show (Either a b)
 = Show sh
 where
        sh (Left  x)    = parens $ "Left"  %% show x
        sh (Right x)    = parens $ "Right" %% show x


-- | Show dictionary for List.
show_List {Show a}: Show (List a)
 = Show sh
 where
        sh Nil          = "Nil"
        sh (Cons x xs)  = parens $ "Cons" %% show x %% show xs

