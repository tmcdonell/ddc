
module Class.Monad
export
{       dFunctorOfMonad; dApplicativeOfMonad;
        return; bind
}
import Class.Functor
import Class.Applicative
where


-- | Class of types that support associative sequencing.
data Monad (m: Data -> Data) where
        Monad
         :  Applicative m
         -> ({@a: Data}   -> a   -> m a)                   -- return
         -> ({@a b: Data} -> m a -> (a -> m b) -> m b)     -- bind
         -> Monad m


-- | Take the Functor dictionary from a Monad dictionary.
dFunctorOfMonad
        : {@m: Data -> Data}
        -> Monad m -> Functor m

dFunctorOfMonad dMonad
        = dFunctorOfApplicative (dApplicativeOfMonad dMonad)


-- | Take the Applicative dictionary from a Monad dictionary.
dApplicativeOfMonad
        : {@m: Data -> Data}
        -> Monad m -> Applicative m

dApplicativeOfMonad (Monad dApplicative _ _)
        = dApplicative


-- | Return a value.
--
--   ISSUE #402: Fix specification of separate signatures
--               with higher kinded type vars.
--
--   return    : {@m: Data -> Data} -> {@a: Data}
--             -> Monad m ~> a -> m a
--
return  {@m: Data -> Data} {@a: Data}
        {(Monad _ return' _): Monad m}
        (x: a): m a
 = return' x


-- | Evaluate a monadic compuation and pass the result to
--   a function that produces a new monadic computation.
--
--   ISSUE #402: Fix specification of separate signatures
--               with higher kinded type vars.
--
--   bind      : (@m: Data -> Data) (@a b: Data)
--             . Monad m ~> m a -> (a -> m b) -> m b
--
bind    {@m: Data -> Data} {@a b: Data}
        {(Monad _ _ bind') : Monad m}
        (ma: m a) (mf: a -> m b): m b
 = bind' ma mf

