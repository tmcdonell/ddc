
module World
export
{       newWorld;
        getCell; setCell;
        getNeighbours;

        stepWorld;
        showWorld
}
import Data.List
import Data.Array
where


-- | A 2D world of cells.
data World (r: Region) where
 World  :  Nat                  -- ^ Width of world.
        -> Nat                  -- ^ Height of world.
        -> Array (Store r Cell) (S (Read r) Cell)
                                -- ^ Linear array of cells.
        -> World r


-- | Convert 2D coordinates to linear coordinates.
linear (world: World r) (x y: Nat): Nat
 | World width _ _      <- world
 = x + y * width


-- Create a new world.
newWorld (width height: Nat): S (Alloc r) (World r)
 = do   arr     = arrayStore_alloc {@r} (width * height) CellEmpty
        World width height arr


-- | Get a single cell from the world.
getCell (world: World r) (x y: Nat)
        : S (Read r) Cell
 | World width height arr       <- world
 = match
        | x >= width    = CellEmpty
        | y >= height   = CellEmpty
        | otherwise     = array_index arr (linear world x y)


-- | Set a single cell in the world.
setCell (world: World r) (x y: Nat) (c: Cell)
        : S (Write r) Unit
 | World width height arr       <- world
 = match
        | x >= width    = ()
        | y >= height   = ()
        | otherwise
         = do   arrayStore_write arr (linear world x y) c
                ()


-- | Get the neighbours of the given location.
getNeighbours
        (world: World r) (x y: Nat)
        : S (Read r) (List Cell)
 = mapS (Î»(T2 x' y') -> getCell world x' y')
 $ Cons (T2 (x - 1) (y - 1)) $ Cons (T2 x (y - 1)) $ Cons (T2 (x + 1) (y - 1))
 $ Cons (T2 (x - 1)  y)                            $ Cons (T2 (x + 1)  y)
 $ Cons (T2 (x - 1) (y + 1)) $ Cons (T2 x (y + 1)) $ Cons (T2 (x + 1) (y + 1))
 $ Nil


-- | Step a world forward in time, returning a new world.
stepWorld
        (world: World r)
        : S (Read r + Alloc r) (World r)
 =  forWorld world $ \x y
 -> stepCell
        (getCell       world x y)
        (getNeighbours world x y)


-- | Compute a new world by applying the given worker function
--   to every available location.
forWorld
        (world: World r)
        (f:     Nat -> Nat -> S (Read r) Cell)
        : S (Read r + Alloc r) (World r)
 | World width height arr       <- world
 = extend r using r' with {Alloc r'; Read r'; Write r'} in
   do   world'  = run newWorld {@r'} width height

        rec go (x y: Nat): S (Read r + Read r' + Write r' + Alloc r') Unit
                | x >= width   = go 0 (y + 1)
                | y >= height  = ()
                | otherwise
                = do    setCell world' x y (f x y)
                        go (x + 1) y

        go 0 0
        world'


-- Show a world as a text string.
showWorld (world: World r): S (Read r) Text
 | World width height arr       <- world
 = go 0 0 ""
 where
        go (x y: Nat) (acc: Text): S (Read r) Text
         | x >= width   = go 0 (y + 1) (acc % "\n")
         | y >= height  = acc
         | otherwise
         = go (x + 1) y
         $ acc % case getCell world x y of
                  CellEmpty -> ". "
                  CellAlive -> "O "

