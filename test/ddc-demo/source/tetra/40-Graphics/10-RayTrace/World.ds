
module World
export world_make
import Object; Light
where


data World where
        World   :  List Object          -- ^ Objects in the world.
                -> List Light           -- ^ Lights in the world.
                -> Vec3                 -- ^ Ambient light in the world
                -> World


-- | Make the world.
world_make (time: Float): World
 = World
        (world_objects  time)
        (world_lights   time)
        (Vec3 0.3 0.3 0.3)

-- | Lights in the world.
world_lights (time: Float): List Light
 = Cons (Light  (Vec3 300.0     (0.0 - 300.0)   (0.0 - 100.0))
                (Vec3 150000.0  150000.0        150000.0))
 $ Nil


-- | Objects in the world at the given time.
world_objects (time: Float): List Object
 = Cons (Checks (Vec3   0.0 100.0 0.0)
                (vec3_normalize (Vec3 0.0 (-1.0) (-0.2)))
                0.2)

 $ Cons (Sphere (Vec3  0.0   0.0   20.0)        30.0
                (Vec3  0.3   0.3    1.0)        0.4)

 $ Cons (Sphere (Vec3 15.0  -20.0 -10.0)        10.0
                (Vec3  1.0   0.3    0.3)        0.4)

 $ Cons (Sphere (Vec3 -15.0 -20.0 -10.0)        10.0
                (Vec3 1.0 0.3 0.3)              0.4)

 $ Cons (Sphere (Vec3  15.0  20.0 -10.0)        10.0
                (Vec3 0.0 1.3 0.3)              0.4)

 $ Cons (Sphere (Vec3 -15.0  20.0 -10.0)        10.0
                (Vec3 0.0 1.3 0.3)              0.4)

 $ Nil



