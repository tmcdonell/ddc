
-- List length using infix addition.
module Test 
data List (a: Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  add: [a: Data].a -> a -> a
    = Λ(a: Data).
      λ(x y: a). add# [a] x y;
  
  length: [a: Data].List a -> Nat#
    = Λ(a: Data).
      λ(xx: List a).
      case xx of {
        Nil  
         -> 0#;
        Cons (x: a) (xs: List a) 
         -> add [Nat#] 1# (length [a] xs)
      }
}


-- More list functions.
module Test 
data List (a: Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  singleton: [a: Data].a -> List a
    = Λ(a: Data).
      λ(x: a).
      Cons [a] x (Nil [a]);
  
  append: [a: Data].List a -> List a -> List a
    = Λ(a: Data).
      λ(xx yy: List a).
      case xx of {
        Nil  
         -> yy;
        Cons (x: a) (xs: List a) 
         -> Cons [a] x (append [a] xs yy)
      };
  
  reverse: [a: Data].List a -> List a
    = Λ(a: Data).
      λ(xx: List a).
      case xx of {
        Nil  
         -> Nil [a];
        Cons (x: a) (xs: List a) 
         -> append [a] (reverse [a] xs) (singleton [a] x)
      };
  
  map: [a b: Data].(a -> b) -> List a -> List b
    = Λ(a b: Data).
      λ(f: a -> b).λ(xx: List a).
      case xx of {
        Nil  
         -> Nil [b];
        Cons (x: a) (xs: List a) 
         -> Cons [b] (f x) (map [a] [b] f xs)
      }
}


-- Effectful List map with explicit effect management.
--  The result computation is boxed just inside the outer lambda.
module Test 
data List (a: Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  mapS: [a b: Data].[e: Effect].(a -> S e b) -> List a -> S e (List b)
    = Λ(a b: Data).Λ(e: Effect).
      λ(f: a -> S e b).λ(xx: List a).
      box
      case xx of {
        Nil  
         -> Nil [b];
        Cons (x: a) (xs: List a) 
         -> Cons [b]
                (run f x)
                (run mapS [a] [b] [e] f xs)
      }
}


-- Polymorphically take the head of a polymorphic list where
-- the element type has a primary region variable.
module Test 
data List (a: Data) where {
        Cons : a -> List a -> List a;
        Nil : List a;
}

data Blerk (r: Region) where {
        Hot : Blerk r;
        Cold : Blerk r;
}
with
letrec {
  head: [a: Data].a -> List a -> a
    = Λ(a: Data).
      λ(def: a).λ(xx: List a).
      case xx of {
        Cons (x: a) (x$Sx100: List a) 
         -> x;
        _ 
         -> def
      };
  
  foo: [r: Region].Unit -> Blerk r
    = Λ(r: Region).
      λ(x$Sx101: Unit).
      head [Blerk r] (Hot [r])
          (Cons [Blerk r] (Cold [r]) (Nil [Blerk r]))
}


-- Check we can use local lambda expressions without type annotations
-- on the parameters.
module Test with
letrec {
  test: Unit
    = (λ(x y: Unit). x) () ()
}

