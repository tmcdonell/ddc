ok


-- Use both separately - no reason they should have same rate. Thus, two processes.
module Test with
letrec {
  vs'$runproc$process: [vs'$'$k: Rate].RateVec# vs'$'$k Int# -> Ref# Int# -> Vector# Int# -> [vs'$PROC: Proc].Unit -> Process# vs'$PROC vs'$'$k
    = Λ(vs'$'$k: Rate).
      λ(vs$rv: RateVec# vs'$'$k Int#).λ(vr$ref: Ref# Int#).λ(vs': Vector# Int#).
      Λ(vs'$PROC: Proc).
      λ(_: Unit).
      let vs$s: Series# vs'$PROC vs'$'$k Int#
            = series# [vs'$PROC] [vs'$'$k] [Int#] vs$rv in
      let vs'$s: Series# vs'$PROC vs'$'$k Int#
            = smap# [vs'$PROC] [vs'$'$k] [Int#] [Int#]
                  (λ(x2: Int#). add# [Int#] 2i# x2) vs$s in
      let vs'$proc: Process# vs'$PROC vs'$'$k
            = sfill# [vs'$PROC] [vs'$'$k] [Int#] vs' vs'$s in
      let vr$proc: Process# vs'$PROC vs'$'$k
            = sreduce# [vs'$PROC] [vs'$'$k] [Int#] vr$ref
                  (λ(x4 x5: Int#). add# [Int#] x4 x5) 0i# vs'$s in
      pjoin# [vs'$PROC] [vs'$'$k] vs'$proc vr$proc;
  
  us'$runproc$process: [us'$'$k: Rate].RateVec# us'$'$k Int# -> Vector# Int# -> [us'$PROC: Proc].Unit -> Process# us'$PROC us'$'$k
    = Λ(us'$'$k: Rate).
      λ(us$rv: RateVec# us'$'$k Int#).λ(us': Vector# Int#).
      Λ(us'$PROC: Proc).
      λ(_: Unit).
      let us$s: Series# us'$PROC us'$'$k Int#
            = series# [us'$PROC] [us'$'$k] [Int#] us$rv in
      let us'$s: Series# us'$PROC us'$'$k Int#
            = smap# [us'$PROC] [us'$'$k] [Int#] [Int#]
                  (λ(x0: Int#). add# [Int#] 1i# x0) us$s in
      let us'$proc: Process# us'$PROC us'$'$k
            = sfill# [us'$PROC] [us'$'$k] [Int#] us' us'$s in
      us'$proc;
  
  test: Vector# Int# -> Vector# Int# -> Tuple3# (Vector# Int#) (Vector# Int#) Int#
    = λ(us vs: Vector# Int#).
      let vs': Vector# Int#
            = vnew# [Int#] (vlength# [Int#] vs) in
      let vr$ref: Ref# Int#
            = new# [Int#] 0i# in
      let vs'$runproc: Unit
            = ratify1# [Int#] [Unit] vs
                  (Λ(vs'$'$k: Rate).
                   λ(vs$rv: RateVec# vs'$'$k Int#).
                   runProcess# [vs'$'$k] (vs'$runproc$process [vs'$'$k] vs$rv vr$ref vs')) in
      let vr: Int#
            = read# [Int#] vr$ref in
      let us': Vector# Int#
            = vnew# [Int#] (vlength# [Int#] us) in
      let us'$runproc: Unit
            = ratify1# [Int#] [Unit] us
                  (Λ(us'$'$k: Rate).
                   λ(us$rv: RateVec# us'$'$k Int#).
                   runProcess# [us'$'$k] (us'$runproc$process [us'$'$k] us$rv us')) in
      let x7: Tuple3# (Vector# Int#) (Vector# Int#) Int#
            = T3# [Vector# Int#] [Vector# Int#] [Int#] us' vs' vr in
      x7
}


-- Try the criss cross one
module Test with
letrec {
  us'$runproc$process: [us''$'$k: Rate].RateVec# us''$'$k Int# -> Ref# Int# -> [us'$PROC: Proc].Unit -> Process# us'$PROC us''$'$k
    = Λ(us''$'$k: Rate).
      λ(us$rv: RateVec# us''$'$k Int#).λ(ur$ref: Ref# Int#).
      Λ(us'$PROC: Proc).
      λ(_: Unit).
      let us$s: Series# us'$PROC us''$'$k Int#
            = series# [us'$PROC] [us''$'$k] [Int#] us$rv in
      let us'$s: Series# us'$PROC us''$'$k Int#
            = smap# [us'$PROC] [us''$'$k] [Int#] [Int#]
                  (λ(x0: Int#). add# [Int#] 1i# x0) us$s in
      let ur$proc: Process# us'$PROC us''$'$k
            = sreduce# [us'$PROC] [us''$'$k] [Int#] ur$ref
                  (λ(x2 x3: Int#). add# [Int#] x2 x3) 0i# us'$s in
      ur$proc;
  
  vs'$runproc$process: [vs''$'$k: Rate].RateVec# vs''$'$k Int# -> Vector# Int# -> Ref# Int# -> Int# -> [vs'$PROC: Proc].Unit -> Process# vs'$PROC vs''$'$k
    = Λ(vs''$'$k: Rate).
      λ(vs$rv: RateVec# vs''$'$k Int#).λ(vs'': Vector# Int#).λ(vr$ref: Ref# Int#).λ(ur: Int#).
      Λ(vs'$PROC: Proc).
      λ(_: Unit).
      let vs$s: Series# vs'$PROC vs''$'$k Int#
            = series# [vs'$PROC] [vs''$'$k] [Int#] vs$rv in
      let vs'$s: Series# vs'$PROC vs''$'$k Int#
            = smap# [vs'$PROC] [vs''$'$k] [Int#] [Int#]
                  (λ(x5: Int#). add# [Int#] 2i# x5) vs$s in
      let vr$proc: Process# vs'$PROC vs''$'$k
            = sreduce# [vs'$PROC] [vs''$'$k] [Int#] vr$ref
                  (λ(x7 x8: Int#). add# [Int#] x7 x8) 0i# vs'$s in
      let vs''$s: Series# vs'$PROC vs''$'$k Int#
            = smap# [vs'$PROC] [vs''$'$k] [Int#] [Int#]
                  (λ(x12: Int#). add# [Int#] ur x12) vs$s in
      let vs''$proc: Process# vs'$PROC vs''$'$k
            = sfill# [vs'$PROC] [vs''$'$k] [Int#] vs'' vs''$s in
      pjoin# [vs'$PROC] [vs''$'$k] vr$proc vs''$proc;
  
  us''$runproc$process: [us''$'$k: Rate].RateVec# us''$'$k Int# -> Vector# Int# -> Int# -> [us''$PROC: Proc].Unit -> Process# us''$PROC us''$'$k
    = Λ(us''$'$k: Rate).
      λ(us$rv: RateVec# us''$'$k Int#).λ(us'': Vector# Int#).λ(vr: Int#).
      Λ(us''$PROC: Proc).
      λ(_: Unit).
      let us$s: Series# us''$PROC us''$'$k Int#
            = series# [us''$PROC] [us''$'$k] [Int#] us$rv in
      let us''$s: Series# us''$PROC us''$'$k Int#
            = smap# [us''$PROC] [us''$'$k] [Int#] [Int#]
                  (λ(x10: Int#). add# [Int#] vr x10) us$s in
      let us''$proc: Process# us''$PROC us''$'$k
            = sfill# [us''$PROC] [us''$'$k] [Int#] us'' us''$s in
      us''$proc;
  
  test: Vector# Int# -> Vector# Int# -> Tuple2# (Vector# Int#) (Vector# Int#)
    = λ(us vs: Vector# Int#).
      let ur$ref: Ref# Int#
            = new# [Int#] 0i# in
      let us'$runproc: Unit
            = ratify1# [Int#] [Unit] us
                  (Λ(us''$'$k: Rate).
                   λ(us$rv: RateVec# us''$'$k Int#).
                   runProcess# [us''$'$k] (us'$runproc$process [us''$'$k] us$rv ur$ref)) in
      let ur: Int#
            = read# [Int#] ur$ref in
      let vr$ref: Ref# Int#
            = new# [Int#] 0i# in
      let vs'': Vector# Int#
            = vnew# [Int#] (vlength# [Int#] vs) in
      let vs'$runproc: Unit
            = ratify1# [Int#] [Unit] vs
                  (Λ(vs''$'$k: Rate).
                   λ(vs$rv: RateVec# vs''$'$k Int#).
                   runProcess# [vs''$'$k] (vs'$runproc$process [vs''$'$k] vs$rv vs'' vr$ref ur)) in
      let vr: Int#
            = read# [Int#] vr$ref in
      let us'': Vector# Int#
            = vnew# [Int#] (vlength# [Int#] us) in
      let us''$runproc: Unit
            = ratify1# [Int#] [Unit] us
                  (Λ(us''$'$k: Rate).
                   λ(us$rv: RateVec# us''$'$k Int#).
                   runProcess# [us''$'$k] (us''$runproc$process [us''$'$k] us$rv us'' vr)) in
      let x14: Tuple2# (Vector# Int#) (Vector# Int#)
            = T2# [Vector# Int#] [Vector# Int#] us'' vs'' in
      x14
}


-- Criss cross, but manifest two more vectors
module Test with
letrec {
  us'$runproc$process: [us''$'$k: Rate].RateVec# us''$'$k Int# -> Ref# Int# -> Vector# Int# -> [us'$PROC: Proc].Unit -> Process# us'$PROC us''$'$k
    = Λ(us''$'$k: Rate).
      λ(us$rv: RateVec# us''$'$k Int#).λ(ur$ref: Ref# Int#).λ(us': Vector# Int#).
      Λ(us'$PROC: Proc).
      λ(_: Unit).
      let us$s: Series# us'$PROC us''$'$k Int#
            = series# [us'$PROC] [us''$'$k] [Int#] us$rv in
      let us'$s: Series# us'$PROC us''$'$k Int#
            = smap# [us'$PROC] [us''$'$k] [Int#] [Int#]
                  (λ(x0: Int#). add# [Int#] 1i# x0) us$s in
      let us'$proc: Process# us'$PROC us''$'$k
            = sfill# [us'$PROC] [us''$'$k] [Int#] us' us'$s in
      let ur$proc: Process# us'$PROC us''$'$k
            = sreduce# [us'$PROC] [us''$'$k] [Int#] ur$ref
                  (λ(x2 x3: Int#). add# [Int#] x2 x3) 0i# us'$s in
      pjoin# [us'$PROC] [us''$'$k] us'$proc ur$proc;
  
  vs'$runproc$process: [vs''$'$k: Rate].RateVec# vs''$'$k Int# -> Vector# Int# -> Ref# Int# -> Int# -> [vs'$PROC: Proc].Unit -> Process# vs'$PROC vs''$'$k
    = Λ(vs''$'$k: Rate).
      λ(vs$rv: RateVec# vs''$'$k Int#).λ(vs'': Vector# Int#).λ(vr$ref: Ref# Int#).λ(ur: Int#).
      Λ(vs'$PROC: Proc).
      λ(_: Unit).
      let vs$s: Series# vs'$PROC vs''$'$k Int#
            = series# [vs'$PROC] [vs''$'$k] [Int#] vs$rv in
      let vs'$s: Series# vs'$PROC vs''$'$k Int#
            = smap# [vs'$PROC] [vs''$'$k] [Int#] [Int#]
                  (λ(x5: Int#). add# [Int#] 2i# x5) vs$s in
      let vr$proc: Process# vs'$PROC vs''$'$k
            = sreduce# [vs'$PROC] [vs''$'$k] [Int#] vr$ref
                  (λ(x7 x8: Int#). add# [Int#] x7 x8) 0i# vs'$s in
      let vs''$s: Series# vs'$PROC vs''$'$k Int#
            = smap# [vs'$PROC] [vs''$'$k] [Int#] [Int#]
                  (λ(x12: Int#). add# [Int#] ur x12) vs'$s in
      let vs''$proc: Process# vs'$PROC vs''$'$k
            = sfill# [vs'$PROC] [vs''$'$k] [Int#] vs'' vs''$s in
      pjoin# [vs'$PROC] [vs''$'$k] vr$proc vs''$proc;
  
  us''$runproc$process: [us''$'$k: Rate].RateVec# us''$'$k Int# -> Vector# Int# -> Int# -> [us''$PROC: Proc].Unit -> Process# us''$PROC us''$'$k
    = Λ(us''$'$k: Rate).
      λ(us'$rv: RateVec# us''$'$k Int#).λ(us'': Vector# Int#).λ(vr: Int#).
      Λ(us''$PROC: Proc).
      λ(_: Unit).
      let us'$s: Series# us''$PROC us''$'$k Int#
            = series# [us''$PROC] [us''$'$k] [Int#] us'$rv in
      let us''$s: Series# us''$PROC us''$'$k Int#
            = smap# [us''$PROC] [us''$'$k] [Int#] [Int#]
                  (λ(x10: Int#). add# [Int#] vr x10) us'$s in
      let us''$proc: Process# us''$PROC us''$'$k
            = sfill# [us''$PROC] [us''$'$k] [Int#] us'' us''$s in
      us''$proc;
  
  test: Vector# Int# -> Vector# Int# -> Tuple2# (Vector# Int#) (Vector# Int#)
    = λ(us vs: Vector# Int#).
      let us': Vector# Int#
            = vnew# [Int#] (vlength# [Int#] us) in
      let ur$ref: Ref# Int#
            = new# [Int#] 0i# in
      let us'$runproc: Unit
            = ratify1# [Int#] [Unit] us
                  (Λ(us''$'$k: Rate).
                   λ(us$rv: RateVec# us''$'$k Int#).
                   runProcess# [us''$'$k] (us'$runproc$process [us''$'$k] us$rv ur$ref us')) in
      let ur: Int#
            = read# [Int#] ur$ref in
      let vr$ref: Ref# Int#
            = new# [Int#] 0i# in
      let vs'': Vector# Int#
            = vnew# [Int#] (vlength# [Int#] vs) in
      let vs'$runproc: Unit
            = ratify1# [Int#] [Unit] vs
                  (Λ(vs''$'$k: Rate).
                   λ(vs$rv: RateVec# vs''$'$k Int#).
                   runProcess# [vs''$'$k] (vs'$runproc$process [vs''$'$k] vs$rv vs'' vr$ref ur)) in
      let vr: Int#
            = read# [Int#] vr$ref in
      let us'': Vector# Int#
            = vnew# [Int#] (vlength# [Int#] us') in
      let us''$runproc: Unit
            = ratify1# [Int#] [Unit] us'
                  (Λ(us''$'$k: Rate).
                   λ(us'$rv: RateVec# us''$'$k Int#).
                   runProcess# [us''$'$k] (us''$runproc$process [us''$'$k] us'$rv us'' vr)) in
      let x14: Tuple2# (Vector# Int#) (Vector# Int#)
            = T2# [Vector# Int#] [Vector# Int#] us'' vs'' in
      x14
}
