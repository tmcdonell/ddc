ok

-- map2 with two filtered - should be outlawed!
module Test with
letrec {
  test: Vector# Int# -> Vector# Int#
    = λ(us: Vector# Int#).
      let us1: Vector# Int#
            = vfilter# [Int#]
                  (λ(x0: Int#). gt# [Int#] 1i# x0) us in
      let us2: Vector# Int#
            = vfilter# [Int#]
                  (λ(x2: Int#). gt# [Int#] 2i# x2) us in
      let us': Vector# Int#
            = vmap2# [Int#] [Int#] [Int#]
                  (λ(x4 x5: Int#). add# [Int#] x4 x5) us1 us2 in
      us'
}


-- Simple filter - return filtered
module Test with
letrec {
  us'$runproc$process: [us$k: Rate].RateVec# us$k Int# -> Vector# Int# -> [us'$PROC: Proc].Unit -> Process# us'$PROC us$k
    = Λ(us$k: Rate).
      λ(us$rv: RateVec# us$k Int#).λ(us': Vector# Int#).
      Λ(us'$PROC: Proc).
      λ(_: Unit).
      let us$s: Series# us'$PROC us$k Int#
            = series# [us'$PROC] [us$k] [Int#] us$rv in
      let us'$flags: Series# us'$PROC us$k Bool#
            = smap# [us'$PROC] [us$k] [Int#] [Bool#]
                  (λ(x0: Int#). gt# [Int#] 1i# x0) us$s in
      smkSel# [us'$PROC] [us$k] [us$k] us'$flags
          (Λ(us'$'$k: Rate).
           λ(us'$sel: Sel1# us'$PROC us$k us'$'$k).
           let us'$s: Series# us'$PROC us'$'$k Int#
                 = spack# [us'$PROC] [us$k] [us'$'$k] [Int#] us'$sel us$s in
           let us'$proc: Process# us'$PROC us'$'$k
                 = sfill# [us'$PROC] [us'$'$k] [Int#] us' us'$s in
           presize# [us'$PROC] [us'$'$k] [us$k]
               (rsel1# [us'$PROC] [us'$'$k] [us$k] [us'$'$k] us'$sel (rid# [us'$PROC] [us'$'$k])) us'$proc);
  
  test: Vector# Int# -> Vector# Int#
    = λ(us: Vector# Int#).
      let us': Vector# Int#
            = vnew# [Int#] (vlength# [Int#] us) in
      let us'$runproc: Unit
            = ratify1# [Int#] [Unit] us
                  (Λ(us$k: Rate).
                   λ(us$rv: RateVec# us$k Int#).
                   runProcess# [us$k] (us'$runproc$process [us$k] us$rv us')) in
      us'
}


-- Map over a filter
module Test with
letrec {
  us'$runproc$process: [us$k: Rate].RateVec# us$k Int# -> Vector# Int# -> [us'$PROC: Proc].Unit -> Process# us'$PROC us$k
    = Λ(us$k: Rate).
      λ(us$rv: RateVec# us$k Int#).λ(us'': Vector# Int#).
      Λ(us'$PROC: Proc).
      λ(_: Unit).
      let us$s: Series# us'$PROC us$k Int#
            = series# [us'$PROC] [us$k] [Int#] us$rv in
      let us'$flags: Series# us'$PROC us$k Bool#
            = smap# [us'$PROC] [us$k] [Int#] [Bool#]
                  (λ(x0: Int#). gt# [Int#] 1i# x0) us$s in
      smkSel# [us'$PROC] [us$k] [us$k] us'$flags
          (Λ(us'$'$k: Rate).
           λ(us'$sel: Sel1# us'$PROC us$k us'$'$k).
           let us'$s: Series# us'$PROC us'$'$k Int#
                 = spack# [us'$PROC] [us$k] [us'$'$k] [Int#] us'$sel us$s in
           let us''$s: Series# us'$PROC us'$'$k Int#
                 = smap# [us'$PROC] [us'$'$k] [Int#] [Int#]
                       (λ(x2: Int#). add# [Int#] 2i# x2) us'$s in
           let us''$proc: Process# us'$PROC us'$'$k
                 = sfill# [us'$PROC] [us'$'$k] [Int#] us'' us''$s in
           presize# [us'$PROC] [us'$'$k] [us$k]
               (rsel1# [us'$PROC] [us'$'$k] [us$k] [us'$'$k] us'$sel (rid# [us'$PROC] [us'$'$k])) us''$proc);
  
  test: Vector# Int# -> Vector# Int#
    = λ(us: Vector# Int#).
      let us'': Vector# Int#
            = vnew# [Int#] (vlength# [Int#] us) in
      let us'$runproc: Unit
            = ratify1# [Int#] [Unit] us
                  (Λ(us$k: Rate).
                   λ(us$rv: RateVec# us$k Int#).
                   runProcess# [us$k] (us'$runproc$process [us$k] us$rv us'')) in
      us''
}


-- Filter of a filtered, return both. Should be single kernel
module Test with
letrec {
  us'$runproc$process: [us$k: Rate].RateVec# us$k Int# -> Vector# Int# -> Vector# Int# -> [us'$PROC: Proc].Unit -> Process# us'$PROC us$k
    = Λ(us$k: Rate).
      λ(us$rv: RateVec# us$k Int#).λ(us'' us': Vector# Int#).
      Λ(us'$PROC: Proc).
      λ(_: Unit).
      let us$s: Series# us'$PROC us$k Int#
            = series# [us'$PROC] [us$k] [Int#] us$rv in
      let us'$flags: Series# us'$PROC us$k Bool#
            = smap# [us'$PROC] [us$k] [Int#] [Bool#]
                  (λ(x0: Int#). gt# [Int#] 1i# x0) us$s in
      smkSel# [us'$PROC] [us$k] [us$k] us'$flags
          (Λ(us'$'$k: Rate).
           λ(us'$sel: Sel1# us'$PROC us$k us'$'$k).
           let us'$s: Series# us'$PROC us'$'$k Int#
                 = spack# [us'$PROC] [us$k] [us'$'$k] [Int#] us'$sel us$s in
           let us'$proc: Process# us'$PROC us'$'$k
                 = sfill# [us'$PROC] [us'$'$k] [Int#] us' us'$s in
           let us''$flags: Series# us'$PROC us'$'$k Bool#
                 = smap# [us'$PROC] [us'$'$k] [Int#] [Bool#]
                       (λ(x2: Int#). gt# [Int#] 2i# x2) us'$s in
           smkSel# [us'$PROC] [us'$'$k] [us$k] us''$flags
               (Λ(us''$'$k: Rate).
                λ(us''$sel: Sel1# us'$PROC us'$'$k us''$'$k).
                let us''$s: Series# us'$PROC us''$'$k Int#
                      = spack# [us'$PROC] [us'$'$k] [us''$'$k] [Int#] us''$sel us'$s in
                let us''$proc: Process# us'$PROC us''$'$k
                      = sfill# [us'$PROC] [us''$'$k] [Int#] us'' us''$s in
                pjoin# [us'$PROC] [us$k]
                    (presize# [us'$PROC] [us'$'$k] [us$k]
                         (rsel1# [us'$PROC] [us'$'$k] [us$k] [us'$'$k] us'$sel (rid# [us'$PROC] [us'$'$k])) us'$proc)
                    (presize# [us'$PROC] [us'$'$k] [us$k]
                         (rsel1# [us'$PROC] [us'$'$k] [us$k] [us'$'$k] us'$sel (rid# [us'$PROC] [us'$'$k]))
                         (presize# [us'$PROC] [us''$'$k] [us'$'$k]
                              (rsel1# [us'$PROC] [us''$'$k] [us'$'$k] [us''$'$k] us''$sel (rid# [us'$PROC] [us''$'$k])) us''$proc))));
  
  test: Vector# Int# -> Tuple2# (Vector# Int#) (Vector# Int#)
    = λ(us: Vector# Int#).
      let us': Vector# Int#
            = vnew# [Int#] (vlength# [Int#] us) in
      let us'': Vector# Int#
            = vnew# [Int#] (vlength# [Int#] us) in
      let us'$runproc: Unit
            = ratify1# [Int#] [Unit] us
                  (Λ(us$k: Rate).
                   λ(us$rv: RateVec# us$k Int#).
                   runProcess# [us$k] (us'$runproc$process [us$k] us$rv us'' us')) in
      let x4: Tuple2# (Vector# Int#) (Vector# Int#)
            = T2# [Vector# Int#] [Vector# Int#] us' us'' in
      x4
}


-- Filter and fold, then use fold value in map over original and filtered. Three kernels:
-- 1- filter, fold
-- 2- map original
-- 3- map filtered
-- :flow-rate..
-- module Test with letrec
-- test    (orig : Vector# Int#) : Tuple2# (Vector# Int#) (Vector# Int#)
--         -- Kernel 1
--  = do   filt  = vfilter# (gt#  1i#) orig 
--         fold  = vreduce#  add# 0i# filt
-- 
--         -- Kernel 2
--         morig = vmap# (add# fold) orig
-- 
--         -- Kernel 3
--         mfilt = vmap# (add# fold) filt
--         T2# morig mfilt
-- ;;
-- 


-- Filter and two folds, then use fold values in map over original and filtered. Three kernels:
-- 1- filter, fold, fold
-- 2- map original
-- 3- map filtered
module Test with
letrec {
  filt$runproc$process: [morig$'$k: Rate].RateVec# morig$'$k Int# -> Ref# Int# -> Vector# Int# -> [filt$PROC: Proc].Unit -> Process# filt$PROC morig$'$k
    = Λ(morig$'$k: Rate).
      λ(orig$rv: RateVec# morig$'$k Int#).λ(fold$ref: Ref# Int#).λ(filt: Vector# Int#).
      Λ(filt$PROC: Proc).
      λ(_: Unit).
      let orig$s: Series# filt$PROC morig$'$k Int#
            = series# [filt$PROC] [morig$'$k] [Int#] orig$rv in
      let filt$flags: Series# filt$PROC morig$'$k Bool#
            = smap# [filt$PROC] [morig$'$k] [Int#] [Bool#]
                  (λ(x0: Int#). gt# [Int#] 1i# x0) orig$s in
      smkSel# [filt$PROC] [morig$'$k] [morig$'$k] filt$flags
          (Λ(filt$'$k: Rate).
           λ(filt$sel: Sel1# filt$PROC morig$'$k filt$'$k).
           let filt$s: Series# filt$PROC filt$'$k Int#
                 = spack# [filt$PROC] [morig$'$k] [filt$'$k] [Int#] filt$sel orig$s in
           let filt$proc: Process# filt$PROC filt$'$k
                 = sfill# [filt$PROC] [filt$'$k] [Int#] filt filt$s in
           let fold$proc: Process# filt$PROC filt$'$k
                 = sreduce# [filt$PROC] [filt$'$k] [Int#] fold$ref
                       (λ(x2 x3: Int#). add# [Int#] x2 x3) 0i# filt$s in
           pjoin# [filt$PROC] [morig$'$k]
               (presize# [filt$PROC] [filt$'$k] [morig$'$k]
                    (rsel1# [filt$PROC] [filt$'$k] [morig$'$k] [filt$'$k] filt$sel (rid# [filt$PROC] [filt$'$k])) filt$proc)
               (presize# [filt$PROC] [filt$'$k] [morig$'$k]
                    (rsel1# [filt$PROC] [filt$'$k] [morig$'$k] [filt$'$k] filt$sel (rid# [filt$PROC] [filt$'$k])) fold$proc));
  
  fold2$runproc$process: [morig$'$k: Rate].RateVec# morig$'$k Int# -> Vector# Int# -> Ref# Int# -> Int# -> [fold2$PROC: Proc].Unit -> Process# fold2$PROC morig$'$k
    = Λ(morig$'$k: Rate).
      λ(orig$rv: RateVec# morig$'$k Int#).λ(morig: Vector# Int#).λ(fold2$ref: Ref# Int#).λ(fold: Int#).
      Λ(fold2$PROC: Proc).
      λ(_: Unit).
      let orig$s: Series# fold2$PROC morig$'$k Int#
            = series# [fold2$PROC] [morig$'$k] [Int#] orig$rv in
      let fold2$proc: Process# fold2$PROC morig$'$k
            = sreduce# [fold2$PROC] [morig$'$k] [Int#] fold2$ref
                  (λ(x5 x6: Int#). add# [Int#] x5 x6) 0i# orig$s in
      let morig$s: Series# fold2$PROC morig$'$k Int#
            = smap# [fold2$PROC] [morig$'$k] [Int#] [Int#]
                  (λ(x8: Int#). add# [Int#] fold x8) orig$s in
      let morig$proc: Process# fold2$PROC morig$'$k
            = sfill# [fold2$PROC] [morig$'$k] [Int#] morig morig$s in
      pjoin# [fold2$PROC] [morig$'$k] fold2$proc morig$proc;
  
  mfilt$runproc$process: [filt$'$k: Rate].RateVec# filt$'$k Int# -> Vector# Int# -> Int# -> [mfilt$PROC: Proc].Unit -> Process# mfilt$PROC filt$'$k
    = Λ(filt$'$k: Rate).
      λ(filt$rv: RateVec# filt$'$k Int#).λ(mfilt: Vector# Int#).λ(fold2: Int#).
      Λ(mfilt$PROC: Proc).
      λ(_: Unit).
      let filt$s: Series# mfilt$PROC filt$'$k Int#
            = series# [mfilt$PROC] [filt$'$k] [Int#] filt$rv in
      let mfilt$s: Series# mfilt$PROC filt$'$k Int#
            = smap# [mfilt$PROC] [filt$'$k] [Int#] [Int#]
                  (λ(x10: Int#). add# [Int#] fold2 x10) filt$s in
      let mfilt$proc: Process# mfilt$PROC filt$'$k
            = sfill# [mfilt$PROC] [filt$'$k] [Int#] mfilt mfilt$s in
      mfilt$proc;
  
  test: Vector# Int# -> Tuple2# (Vector# Int#) (Vector# Int#)
    = λ(orig: Vector# Int#).
      let filt: Vector# Int#
            = vnew# [Int#] (vlength# [Int#] orig) in
      let fold$ref: Ref# Int#
            = new# [Int#] 0i# in
      let filt$runproc: Unit
            = ratify1# [Int#] [Unit] orig
                  (Λ(morig$'$k: Rate).
                   λ(orig$rv: RateVec# morig$'$k Int#).
                   runProcess# [morig$'$k] (filt$runproc$process [morig$'$k] orig$rv fold$ref filt)) in
      let fold: Int#
            = read# [Int#] fold$ref in
      let fold2$ref: Ref# Int#
            = new# [Int#] 0i# in
      let morig: Vector# Int#
            = vnew# [Int#] (vlength# [Int#] orig) in
      let fold2$runproc: Unit
            = ratify1# [Int#] [Unit] orig
                  (Λ(morig$'$k: Rate).
                   λ(orig$rv: RateVec# morig$'$k Int#).
                   runProcess# [morig$'$k] (fold2$runproc$process [morig$'$k] orig$rv morig fold2$ref fold)) in
      let fold2: Int#
            = read# [Int#] fold2$ref in
      let mfilt: Vector# Int#
            = vnew# [Int#] (vlength# [Int#] filt) in
      let mfilt$runproc: Unit
            = ratify1# [Int#] [Unit] filt
                  (Λ(filt$'$k: Rate).
                   λ(filt$rv: RateVec# filt$'$k Int#).
                   runProcess# [filt$'$k] (mfilt$runproc$process [filt$'$k] filt$rv mfilt fold2)) in
      let x12: Tuple2# (Vector# Int#) (Vector# Int#)
            = T2# [Vector# Int#] [Vector# Int#] morig mfilt in
      x12
}


