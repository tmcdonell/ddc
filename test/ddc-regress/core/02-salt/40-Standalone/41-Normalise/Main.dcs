
module Main
export {
         main     : [r1 : Region]. Nat# -> Ptr# r1 (Ptr# r1 Word8#) -> Int#;
}
import foreign c value {
        ddcInit                 : Nat# -> Nat# -> Unit;
        primShowInt             : [r : Region]. Int# -> Ptr# r Obj;
        primStdoutPutVector     : [r : Region]. Ptr# r Obj -> Void#;
}
with letrec {

allocRaw [r : Region] (tag : Tag#) (bytesPayload : Nat#) : Ptr# r Obj
 = do { bytesObj        = add# [Nat#] 8# bytesPayload;
        addr            = alloc# bytesObj;

        format          = 42w32#;
        tag32           = promote# [Word32#] [Tag#] tag;
        tagShift        = shl# [Word32#] tag32 8w32#;
        header          = bor# [Word32#] tagShift format;
        write# [Word32#] addr 0# header;

        bytesObj32      = truncate# [Word32#] [Nat#] bytesObj;
        write# [Word32#] addr 4# bytesObj32;

        return# [Ptr# r Obj] (makePtr# [r] [Obj] addr);
     };


boxWord32 [r : Region] (x : Word32#) : Ptr# r Obj
 = do { obj     = allocRaw [r] TAG0# 4#;
        addr    = takePtr# [r] [Obj] obj;
        write#  [Word32#] addr 8# x;
        return# [Ptr# r Obj] obj;
      };


unboxWord32 [r : Region] (obj : Ptr# r Obj) : Word32#
 = do { addr    = takePtr# [r] [Obj] obj;
        x       = read#   [Word32#] addr 8#;
        return# [Word32#] x;
      };


addWord32 [r : Region] (x : Ptr# r Obj) (y : Ptr# r Obj) : Ptr# r Obj
 = return# [Ptr# r Obj] (boxWord32 [r] (add# [Word32#] (unboxWord32 [r] x) (unboxWord32 [r] y)));


subWord32 [r : Region] (x : Ptr# r Obj) (y : Ptr# r Obj) : Ptr# r Obj
 = return# [Ptr# r Obj] (boxWord32 [r] (sub# [Word32#] (unboxWord32 [r] x) (unboxWord32 [r] y)));


mulWord32 [r : Region] (x : Ptr# r Obj) (y : Ptr# r Obj) : Ptr# r Obj
 = return# [Ptr# r Obj] (boxWord32 [r] (mul# [Word32#] (unboxWord32 [r] x) (unboxWord32 [r] y)));


fac [r : Region] (x: Ptr# r Obj) : Ptr# r Obj
 = do { cc      = eq# [Word32#] (unboxWord32 [r] x) 0w32#;
        case cc of {
         True#  -> return# [Ptr# r Obj] (boxWord32 [r] 1w32#);
         False# -> return# [Ptr# r Obj] (mulWord32 [r] x (fac [r] (subWord32 [r] x (boxWord32 [r] 1w32#))));
        };
      };


main [r : Region] (argc : Nat#) (argv : Ptr# r (Ptr# r Word8#)) : Int#
 = do { ddcInit 4096# 1024#;
        x       = boxWord32 [r] 10w32#;
        str     = primShowInt [r] (truncate# [Int#] [Word32#] (unboxWord32 [r] (fac [r] x)));
        primStdoutPutVector [r] str;

        return# [Int#] 0i#;
      };
}
