
module Main
export {
        main      : [r1 r2 : Region]. Nat# -> Ptr# r1 (Ptr# r1 Word8#) -> Int#;
}
import foreign c value {
        ddcInit                 : Nat# -> Nat# -> Unit;
        primShowInt             : [r : Region].Int# -> Ptr# r Obj;
        primStdoutPutVector     : [r : Region].Ptr# r Obj -> Void#;
}
with letrec {

allocRaw [r : Region] (tag : Tag#) (bytesPayload : Nat#)
         : Ptr# r Obj
 = do { bytesObj        = add# [Nat#] 8# bytesPayload;
        addr            = alloc# bytesObj;

        tag32           = promote# [Word32#] [Tag#] tag;
        format          = 0b00110001w32#;
        tagShift        = shl# [Word32#] tag32 8w32#;
        header          = bor# [Word32#] tagShift format;
        write# [Word32#] addr 0# header;

        bytesObj32      = truncate# [Word32#] [Nat#] bytesObj;
        write# [Word32#] addr 4# bytesObj32;

        ptr             = makePtr# [r] [Obj] addr;
        return# [Ptr# r Obj] ptr;
     };


boxWord32 [r : Region] (x : Word32#)
          : Ptr# r Obj
 = do { obj     = allocRaw [r] TAG0# 4#;
        addr    = takePtr# [r] [Obj] obj;
        write#  [Word32#] addr 8# x;
        return# [Ptr# r Obj] obj;
      };

unboxWord32 [r : Region] (obj : Ptr# r Obj)
            : Word32#
 = do { addr    = takePtr# [r] [Obj] obj;
        x       = read#   [Word32#] addr 8#;
        return# [Word32#] x;
      };


addWord32 [r1 r2 r3 : Region] (x : Ptr# r1 Obj) (y : Ptr# r2 Obj)
          : Ptr# r3 Obj
 = do { xu      = unboxWord32 [r1] x;
        yu      = unboxWord32 [r2] y;
        zu      = add# [Word32#] xu yu;
        z       = boxWord32 [r3] zu;
        return# [Ptr# r3 Obj] z;
      };


subWord32 [r1 r2 r3 : Region] (x : Ptr# r1 Obj) (y : Ptr# r2 Obj)
          : Ptr# r3 Obj
 = do { xu      = unboxWord32 [r1] x;
        yu      = unboxWord32 [r2] y;
        zu      = sub# [Word32#] xu yu;
        z       = boxWord32 [r3] zu;
        return# [Ptr# r3 Obj] z;
      };


mulWord32 [r1 r2 r3 : Region] (x : Ptr# r1 Obj) (y : Ptr# r2 Obj)
          : Ptr# r3 Obj
 = do { xu      = unboxWord32 [r1] x;
        yu      = unboxWord32 [r2] y;
        zu      = mul# [Word32#] xu yu;
        z       = boxWord32 [r3] zu;
        return# [Ptr# r3 Obj] z;
      };

fac [r1 r2 : Region] (x: Ptr# r1 Obj) : Ptr# r2 Obj
 = do { x2      = unboxWord32 [r1] x;
        cc      = eq# [Word32#] x2 0w32#;
        case cc of {
         True# -> do {
                r       = boxWord32 [r2] 1w32#;
                return# [Ptr# r2 Obj] r;
         };

         False# -> do {
                n2      = boxWord32 [r2] 1w32#;
                n3      = subWord32 [r1] [r2] [r2] x n2;
                n4      = fac [r2] [r2] n3;
                n5      = mulWord32 [r1] [r2] [r2] x n4;
                return# [Ptr# r2 Obj] n5;
         };
        }
      };

-- needs support for private
main [r1 r2 : Region] (argc : Nat#) (argv : Ptr# r1 (Ptr# r1 Word8#)) : Int#
 = do { ddcInit 4096# 1024#;
        x       = boxWord32 [r1] 10w32#;
        x2      = fac [r1] [r2] x;
        x2u     = unboxWord32 [r2] x2;
        str     = primShowInt [r2] (truncate# [Int#] [Word32#] x2u);
        primStdoutPutVector [r2] str;

        return# [Int#] 0i#;
      };
}
