:set lang Tetra

-- Load a module definition.
:load..
module Main
export value {
        main    : Unit -> S Pure Unit;
        double  : Nat# -> Nat#;
}
import value {
        two : Unit -> Nat#;
}
with
private rt with { w1 : Const rt } in
let     one = 1# in
letrec {
        main (_ : Unit) : S Pure Unit
         = box private r0 in
           ();

        double  (x : Nat#) : Nat#
         = mul# [Nat#] x (two ());

        thing   [r : Region] (x : Nat#) : Nat#
         = add# [Nat#] x one;
};;


-- Load the same module using the offside rule.
:load..
module  Main
export value
        main    : Unit -> S Pure Unit
        double  : Nat# -> Nat#
import value
        two : Unit -> Nat#
with
private rt with { w1 : Const rt } in
let     one = 1# in
letrec
        main (_ : Unit) : S Pure Unit
         = box private r0 in
           ()

        double  (x : Nat#) : Nat#
         = mul# [Nat#] x (two ())

        thing   [r : Region] (x : Nat#) : Nat#
         = add# [Nat#] x one
;;
