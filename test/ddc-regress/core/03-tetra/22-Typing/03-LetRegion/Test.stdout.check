ok


-- Parse private with no witnesses
private r1 in
()
:*: Unit
:!: Pure


-- Parse private with one witness.
private r1 with {w1: Const r1} in
()
:*: Unit
:!: Pure


-- Parse private with multiple witnesses.
private r1 with {w1: Const r1; w2: Read r1} in
()
:*: Unit
:!: Pure


-- Use the bound region in the body of the expression.
module Test 
import data Ref (r: Region) (a: Data) where {
        MkRef : a -> Ref r a;
}
with
letrec {
  test: Nat#
    = private r1 in
      let x: Ref r1 Nat#
            = MkRef [r1] [Nat#] 5# in
      case x of {
        MkRef (y: Nat#) 
         -> y
      }
}


-- Error: private cannot shadow region variables that are already in the
-- environment because the new witnesses may conflict with the old ones.
Error in transformed module.
  in stage CoreLoad
  in pipe  PipeCoreCheck/Check
  <batch>:43:4
  Region variables shadow existing ones.
             Region variables: r1: Region
       are already in environment


-- Error: private region variable cannot shadow variable that is already 
-- in the environment.
Error in transformed module.
  in stage CoreLoad
  in pipe  PipeCoreCheck/Check
  <batch>:58:4
  Region variables shadow existing ones.
             Region variables: r: Region
       are already in environment



-- Error: private region variable is free in the type of the returned value.
Error in transformed module.
  in stage CoreLoad
  in pipe  PipeCoreCheck/Check
  <batch>:73:9
  Region variables escape scope of private.
         The region variables: r: Region
     is free in the body type: Ref r Nat#


-- Error: witness types with a private must use explicit type constructors.
When checking expression.
  <batch>:81:1
  Invalid witness type with private.
            The witness: w: c r1
    cannot be created with a private


