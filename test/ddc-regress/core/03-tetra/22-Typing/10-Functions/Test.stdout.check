ok


-- Check types of primitive arithmetic functions use the correct function constructor.
module Test with
letrec {
  addInt: Int# -> Int# -> Int#
    = λ(x: Int#). add# [Int#] x
}


-- Rank-1, non-prenex type. From GHC #1634. 
-- Issue #323: Insert type lambdas during inference with higher ranked types.
--  This works only if we insert our own lambda to perform the inner generalisation.
ok
module Test 
data Tuple2 (a: Data) (b: Data) where {
        T2 : a -> b -> Tuple2 a b;
}
with
letrec {
  t1: [a: Data].a -> [b: Data].b -> Tuple2 a b
    = Λ(a: Data).
      λ(x: a).
      Λ(b: Data). T2 [a] [b] x
}


-- Rank-2 type.
ok
module Test with
letrec {
  thing: ([a: Data].a -> a) -> Unit
    = λ(id: [a: Data].a -> a).
      let _: Nat#
            = id [Nat#] 5# in
      let _: Unit
            = id [Unit] () in
      ();
  
  foo: Unit -> Unit
    = λ(x: Unit).
      thing
          (Λ(a: Data).
           λ(x: a). x)
}


-- Rank-3 type.
ok
module Test with
letrec {
  id: [a: Data].a -> a
    = Λ(a: Data).
      λ(x: a). x;
  
  thing1: (([a: Data].a -> a) -> Nat#) -> Nat#
    = λ(blerk: ([a: Data].a -> a) -> Nat#).
      blerk
          (Λ(a: Data).
           λ(x: a). x);
  
  thing2: Unit -> Nat#
    = λ(u: Unit).
      thing1
          (λ(f: [a: Data].a -> a). f [Nat#] 5#)
}


-- Error: missing type annotation for parameter of lambda.
When checking expression.
  <batch>:57:2
  Missing annotation on function parameter.
    With paramter: x


-- Error: cannot shadow spec binders.
Error in transformed module.
  in stage CoreLoad
  in pipe  PipeCoreCheck/Check
  <batch>:66:4
  Cannot shadow variable.
    binder: r: Region
    is already in the environment.

