ok
ok

-- Set the builder explicitly so we get consistent object layouts.
ok


-------------------------------------------------------------------------------
-- Unboxed literal patterns.
module Test with
letrec {
  foo: Ptr# rT Obj -> Ptr# rT Obj
    = λ(x: Ptr# rT Obj).
      let xx0: Word16#
            = let ^: Ptr# rT Obj
                    = x in
              let ^: Ptr# rT Word8#
                    = ddcPayloadSmall [rT] ^0 in
              let ^: Word16#
                    = peek# [rT] [Word16#]
                          (plusPtr# [rT] [Word16#] (castPtr# [rT] [Word16#] [Word8#] ^0) 0#) in
              ^0 in
      case xx0 of {
        5w16#  
         -> let ^: Ptr# rT Obj
                  = ddcAllocSmall [rT] TAG0# 8# in
            let ^: Ptr# rT Word8#
                  = ddcPayloadSmall [rT] ^0 in
            let _: Void#
                  = poke# [rT] [Word16#]
                        (plusPtr# [rT] [Word16#] (castPtr# [rT] [Word16#] [Word8#] ^0) 0#) 6w16# in
            ^1;
        7w16#  
         -> let ^: Ptr# rT Obj
                  = ddcAllocSmall [rT] TAG0# 8# in
            let ^: Ptr# rT Word8#
                  = ddcPayloadSmall [rT] ^0 in
            let _: Void#
                  = poke# [rT] [Word16#]
                        (plusPtr# [rT] [Word16#] (castPtr# [rT] [Word16#] [Word8#] ^0) 0#) 8w16# in
            ^1;
        _ 
         -> let ^: Ptr# rT Obj
                  = ddcAllocSmall [rT] TAG0# 8# in
            let ^: Ptr# rT Word8#
                  = ddcPayloadSmall [rT] ^0 in
            let _: Void#
                  = poke# [rT] [Word16#]
                        (plusPtr# [rT] [Word16#] (castPtr# [rT] [Word16#] [Word8#] ^0) 0#) 0w16# in
            ^1
      }
}


module Test with
letrec {
  foo: Ptr# rT Obj -> Ptr# rT Obj
    = λ(x: Ptr# rT Obj).
      let xx0: Word32#
            = let ^: Ptr# rT Obj
                    = x in
              let ^: Ptr# rT Word8#
                    = ddcPayloadSmall [rT] ^0 in
              let ^: Word32#
                    = peek# [rT] [Word32#]
                          (plusPtr# [rT] [Word32#] (castPtr# [rT] [Word32#] [Word8#] ^0) 0#) in
              ^0 in
      case xx0 of {
        5w32#  
         -> let ^: Ptr# rT Obj
                  = ddcAllocSmall [rT] TAG0# 8# in
            let ^: Ptr# rT Word8#
                  = ddcPayloadSmall [rT] ^0 in
            let _: Void#
                  = poke# [rT] [Word32#]
                        (plusPtr# [rT] [Word32#] (castPtr# [rT] [Word32#] [Word8#] ^0) 0#) 6w32# in
            ^1;
        7w32#  
         -> let ^: Ptr# rT Obj
                  = ddcAllocSmall [rT] TAG0# 8# in
            let ^: Ptr# rT Word8#
                  = ddcPayloadSmall [rT] ^0 in
            let _: Void#
                  = poke# [rT] [Word32#]
                        (plusPtr# [rT] [Word32#] (castPtr# [rT] [Word32#] [Word8#] ^0) 0#) 8w32# in
            ^1;
        _ 
         -> let ^: Ptr# rT Obj
                  = ddcAllocSmall [rT] TAG0# 8# in
            let ^: Ptr# rT Word8#
                  = ddcPayloadSmall [rT] ^0 in
            let _: Void#
                  = poke# [rT] [Word32#]
                        (plusPtr# [rT] [Word32#] (castPtr# [rT] [Word32#] [Word8#] ^0) 0#) 0w32# in
            ^1
      }
}


module Test with
letrec {
  foo: Ptr# rT Obj -> Ptr# rT Obj
    = λ(x: Ptr# rT Obj).
      let xx0: Word64#
            = let ^: Ptr# rT Obj
                    = x in
              let ^: Ptr# rT Word8#
                    = ddcPayloadSmall [rT] ^0 in
              let ^: Word64#
                    = peek# [rT] [Word64#]
                          (plusPtr# [rT] [Word64#] (castPtr# [rT] [Word64#] [Word8#] ^0) 0#) in
              ^0 in
      case xx0 of {
        5w64#  
         -> let ^: Ptr# rT Obj
                  = ddcAllocSmall [rT] TAG0# 8# in
            let ^: Ptr# rT Word8#
                  = ddcPayloadSmall [rT] ^0 in
            let _: Void#
                  = poke# [rT] [Word64#]
                        (plusPtr# [rT] [Word64#] (castPtr# [rT] [Word64#] [Word8#] ^0) 0#) 6w64# in
            ^1;
        7w64#  
         -> let ^: Ptr# rT Obj
                  = ddcAllocSmall [rT] TAG0# 8# in
            let ^: Ptr# rT Word8#
                  = ddcPayloadSmall [rT] ^0 in
            let _: Void#
                  = poke# [rT] [Word64#]
                        (plusPtr# [rT] [Word64#] (castPtr# [rT] [Word64#] [Word8#] ^0) 0#) 8w64# in
            ^1;
        _ 
         -> let ^: Ptr# rT Obj
                  = ddcAllocSmall [rT] TAG0# 8# in
            let ^: Ptr# rT Word8#
                  = ddcPayloadSmall [rT] ^0 in
            let _: Void#
                  = poke# [rT] [Word64#]
                        (plusPtr# [rT] [Word64#] (castPtr# [rT] [Word64#] [Word8#] ^0) 0#) 0w64# in
            ^1
      }
}


-- Unboxed Bool pattern.
module Test with
letrec {
  foo: Ptr# rT Obj -> Ptr# rT Obj
    = λ(x: Ptr# rT Obj).
      let xx0: Bool#
            = let ^: Ptr# rT Obj
                    = x in
              let ^: Ptr# rT Word8#
                    = ddcPayloadSmall [rT] ^0 in
              let ^: Bool#
                    = peek# [rT] [Bool#]
                          (plusPtr# [rT] [Bool#] (castPtr# [rT] [Bool#] [Word8#] ^0) 0#) in
              ^0 in
      case xx0 of {
        True#  
         -> let ^: Ptr# rT Obj
                  = ddcAllocSmall [rT] TAG0# 8# in
            let ^: Ptr# rT Word8#
                  = ddcPayloadSmall [rT] ^0 in
            let _: Void#
                  = poke# [rT] [Bool#]
                        (plusPtr# [rT] [Bool#] (castPtr# [rT] [Bool#] [Word8#] ^0) 0#) False# in
            ^1;
        _ 
         -> let ^: Ptr# rT Obj
                  = ddcAllocSmall [rT] TAG0# 8# in
            let ^: Ptr# rT Word8#
                  = ddcPayloadSmall [rT] ^0 in
            let _: Void#
                  = poke# [rT] [Bool#]
                        (plusPtr# [rT] [Bool#] (castPtr# [rT] [Bool#] [Word8#] ^0) 0#) True# in
            ^1
      }
}


-- Compile nested function via lambda lifting.
Error in transformed module.
  in stage CoreLoad
  in pipe  PipeCoreCheck/Check
  <batch>:53:12
  Cannot apply non-function
                of type: [a: Data].a -> a


-- Compile application of anonymous function.
module Test with
letrec {
  app: [a$r b$r: Region].Ptr# rT Obj -> Ptr# rT Obj -> Ptr# rT Obj
    = Λ(a$r b$r: Region).
      λ(f x: Ptr# rT Obj). ddcApply1 [rT] [rT] [rT] f x
}


-- Construct a lists of units.
-- The head field of the Cons cells has no primary region.
module Test with
letrec {
  singleton: Ptr# rT Obj -> Ptr# rT Obj
    = λ(x: Ptr# rT Obj).
      let xx0: Ptr# rT Obj
            = let ^: Ptr# rT Obj
                    = ddcAllocBoxed [rT] TAG0# 0# in
              ^0 in
      let ^: Ptr# rT Obj
            = ddcAllocBoxed [rT] TAG1# 2# in
      let _: Void#
            = ddcSetBoxed [rT] [rT] ^0 0# x in
      let _: Void#
            = ddcSetBoxed [rT] [rT] ^0 1# xx0 in
      ^0
}


-- Destruct a list of units.
-- The head field of the Cons cell has no primary region.
module Test with
letrec {
  headUnit: Ptr# rT Obj -> Ptr# rT Obj
    = λ(xx: Ptr# rT Obj).
      case ddcTagOfObject [rT] xx of {
        TAG1#  
         -> let x: Ptr# rT Obj
                  = ddcGetBoxed [rT] [rT] xx 0# in
            let xx0: Ptr# rT Obj
                  = ddcGetBoxed [rT] [rT] xx 1# in
            x;
        TAG0#  
         -> ddcAllocBoxed [rT] TAG0# 0#;
        _ 
         -> fail# [Ptr# rT Obj]
      }
}


-- Keep witnesses arguments
Fragment violation when converting Tetra module to Salt module.
  Cannot convert expression.
    Cannot convert function abstraction in this context.
    The program must be lambda-lifted before conversion.
  
    with: λ(w: Mutable r).λ(x: Unit). convert# [U# Word64#] [Word64#] 42w64##


-------------------------------------------------------------------------------
-- Trigger errors about unsupported features in the Tetra to Salt conversion.
ok

-- OK: Anonymous binders are namified on the way into the conversion.
module Test with
letrec {
  id: Ptr# rT Obj -> Ptr# rT Obj
    = λ(xx0: Ptr# rT Obj). xx0
}


-- Error: partial application of primitive data constructors is not supported.
Error in transformed module.
  in stage TetraToSalt/toSalt
  in pipe  PipeCoreCheck/Check
  ()
  Type mismatch.
    inferred type: U# Nat#
    expected type: U# Nat# -> U# Nat#


-- OK: partial application if user defined data constructors is now supported.
module Test with
letrec {
  thing$l$L$2: Ptr# rT Obj -> Ptr# rT Obj -> Ptr# rT Obj
    = λ(l$0$0 l$1$1: Ptr# rT Obj).
      let ^: Ptr# rT Obj
            = ddcAllocBoxed [rT] TAG0# 2# in
      let _: Void#
            = ddcSetBoxed [rT] [rT] ^0 0# l$0$0 in
      let _: Void#
            = ddcSetBoxed [rT] [rT] ^0 1# l$1$1 in
      ^0;
  
  thing: Ptr# rT Obj -> Ptr# rT Obj
    = λ(xx0: Ptr# rT Obj).
      let xx1: Ptr# rT Obj
            = ddcAllocThunk [rT] (convert# [Addr#] [Ptr# rT Obj -> Ptr# rT Obj -> Ptr# rT Obj] thing$l$L$2) 2# 0# 0# 0# in
      let xx2: Ptr# rT Obj
            = let ^: Ptr# rT Obj
                    = ddcAllocSmall [rT] TAG0# 8# in
              let ^: Ptr# rT Word8#
                    = ddcPayloadSmall [rT] ^0 in
              let _: Void#
                    = poke# [rT] [Nat#]
                          (plusPtr# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0#) 5# in
              ^1 in
      let ^: Ptr# rT Obj
            = ddcExtendThunk [rT] [rT] xx1 1# in
      let ^: Nat#
            = ddcArgsThunk [rT] xx1 in
      let _: Void#
            = ddcSetThunk [rT] [rT] ^1 ^0 0# xx2 in
      ^1
}


-- Error: partial application of primitive operators is not supported.
Error in transformed module.
  in stage TetraToSalt/toSalt
  in pipe  PipeCoreCheck/Check
  ()
  Type mismatch.
    inferred type: U# Nat#
    expected type: U# Nat# -> U# Nat#


-- OK: let expressions in nested contexts are normalized on the way in to
-- the conversion.
module Test with
letrec {
  id: [a$r: Region].Ptr# rT Obj -> Ptr# rT Obj
    = Λ(a$r: Region).
      λ(x: Ptr# rT Obj). x;
  
  foo: Ptr# rT Obj -> Ptr# rT Obj
    = λ(xx0: Ptr# rT Obj).
      let xx1: Ptr# rT Obj
            = let ^: Ptr# rT Obj
                    = ddcAllocSmall [rT] TAG0# 8# in
              let ^: Ptr# rT Word8#
                    = ddcPayloadSmall [rT] ^0 in
              let _: Void#
                    = poke# [rT] [Nat#]
                          (plusPtr# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0#) 5# in
              ^1 in
      id [rT] xx1
}


-- Error: higher kinded type arguments are not yet supported.
module Test with
letrec {
  nothin: [b$r: Region].Ptr# rT Obj -> Ptr# rT Obj
    = Λ(b$r: Region).
      λ(x: Ptr# rT Obj). x;
  
  foo: Ptr# rT Obj -> Ptr# rT Obj
    = λ(xx0: Ptr# rT Obj).
      let xx1: Ptr# rT Obj
            = let ^: Ptr# rT Obj
                    = ddcAllocSmall [rT] TAG0# 8# in
              let ^: Ptr# rT Word8#
                    = ddcPayloadSmall [rT] ^0 in
              let _: Void#
                    = poke# [rT] [Nat#]
                          (plusPtr# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0#) 5# in
              ^1 in
      nothin [rT] xx1
}


-------------------------------------------------------------------------------
-- Ok: we should be able to convert the Alloc, Read, Write caps,
-- even though conversion for the Ref primops isn't implemented yet.
module Test with
letrec {
  blerk: Ptr# rT Obj -> Ptr# rT Obj
    = λ(xx0: Ptr# rT Obj).
      let ^: Ptr# rT Obj
            = ddcAllocSmall [rT] TAG0# 8# in
      let ^: Ptr# rT Word8#
            = ddcPayloadSmall [rT] ^0 in
      let _: Void#
            = poke# [rT] [Nat#]
                  (plusPtr# [rT] [Nat#] (castPtr# [rT] [Nat#] [Word8#] ^0) 0#) 5# in
      ^1
}


